# Kernel: hgemm_tn_128x32

# Copyright 2014 Nervana Systems Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


<CONSTANT_MAPPING>
    addr_zero  : 4x<128*8*2 + 32*8*2 + 0>

    gridDimA : c[0x0][0x14]
    gridDimB : c[0x0][0x18]

    param_Rand[0]   : c[0x0][0x140]
    param_Rand[1]   : c[0x0][0x144]
    param_A[0]      : c[0x0][0x148]
    param_A[1]      : c[0x0][0x14c]
    param_B[0]      : c[0x0][0x150]
    param_B[1]      : c[0x0][0x154]
    param_C[0]      : c[0x0][0x158]
    param_C[1]      : c[0x0][0x15c]
    param_lda       : c[0x0][0x160]
    param_ldb       : c[0x0][0x164]
    param_ldc       : c[0x0][0x168]
    param_m         : c[0x0][0x16c]
    param_n         : c[0x0][0x170]
    param_k         : c[0x0][0x174]
    param_alpha     : c[0x0][0x178]
    param_beta      : c[0x0][0x17c]
    param_flags     : c[0x0][0x180]
</CONSTANT_MAPPING>

<REGISTER_MAPPING>

    0-31 ~ tid, blkA, blkB, lda, ldb, ta, tb, tid1, tid15, tidAX, tidBX, dimA, flag, txa64

    0-31 : czero<00-31>

     3, 2,11,10 : cx<0-3>y0
     7, 6,15,14 : cx<0-3>y1
     1, 0, 9, 8 : cx<0-3>y2
     5, 4,13,12 : cx<0-3>y3
    19,18,27,26 : cx<0-3>y4
    23,22,31,30 : cx<0-3>y5
    17,16,25,24 : cx<0-3>y6
    21,20,29,28 : cx<0-3>y7

    32-43 ~ x<1-3|65-67>, y1

    44-45 : Rand<0-1>

    32-43 : j0Ay<0-7>, j0Bx<0-3>
    44-55 : j1Ay<0-7>, j1Bx<0-3>

    56-65 : loadA<0-7>,  loadB<0-1>
    66-69 : trackA<0-1>, trackB<0-1>

    70-79 ~ writeAs, writeBs, k, lda8, ldb8, txa, txb, tidY, swapBuf
    80-83 ~ readAs, readBs, tbid, seed

    32-39 : C00y<0-1>, C04y<0-1>, C08y<0-1>, C12y<0-1>
    40-47 : c<0-3>, d3, d2, d1, d0
    40-47 ~ ldc, cx, ci, xmad_c, clk_shf1, clk_shf2, tid31, tid96
    48-79 ~ threadId, blockA, blockB, lfsr<0-2>, ldc1, ldc4, ldc60, writeCs, readCs, cy<00|04|08|12>, alpha, beta, exp<0-3>, rand<0-3>, lfsr<0-2>_1, lfsr<0-2>_2, flags

</REGISTER_MAPPING>

--:-:1:-:1      S2R tid,  SR_TID.X;
--:-:2:-:1      S2R blkA, SR_CTAID.X;
--:-:3:-:1      S2R blkB, SR_CTAID.Y;

<SCHEDULE_BLOCK>
--:-:-:-:1      MOV k,    param_k;
--:-:-:-:1      STS.128 [addr_zero], RZ;

// Grab a seed for this thread
// (blkB*gridDimA*256 + blkA*256 + tid) & (1024*256 - 1)
--:-:-:-:1      MOV flag, param_flags;
--:-:-:-:1      LOP.AND.NZ P4, RZ, flag, 0x1;
--:-:-:-:1      MOV dimA, gridDimA;
03:-:-:-:1      ISCADD tbid, blkA, tid, 8;
04:-:-:-:1      XMAD.U16.U16 dimA, blkB, dimA, RZ;
--:-:-:-:1      ISCADD tbid, dimA, tbid, 8;
--:-:-:-:1      LOP.AND seed, tbid, 1x<2048*32 - 1>;
--:-:-:-:1      LEA      Rand0.CC, seed, param_Rand[0],     0x2;
--:-:-:-:1      LEA.HI.X Rand1,    seed, param_Rand[1], RZ, 0x2;
--:-:-:-:1  @P4 LDG.E.CS seed, [Rand];

// tidAX = (tid & 15) << 3|2
// tidBX = (tid & 15) << 1
// tidY  = (tid >> 4) & 7
--:-:-:-:1      LOP.AND tid1,  tid, 1;
01:-:-:-:1      LOP.AND tid15, tid, 15;
<CODE>
    our $vec;
    return $vec ? q{
--:-:-:-:1      SHL     tidAX, tid15, 3;
    } : q{
--:-:-:-:1      SHL     tidAX, tid15, 2;
    };
</CODE>

--:-:-:-:1      SHL     tidBX, tid15, 1;
--:-:-:-:1      BFE.U32 tidY,  tid,   0x304; // 3 bits at position 4

--:-:-:-:1      MOV lda,  param_lda;
--:-:-:-:1      MOV ldb,  param_ldb;
--:-:-:-:1      SHL lda8, lda, 4;
--:-:-:-:1      SHL ldb8, ldb, 4;

// trackA += (blkA*128 + lda*tidY + tidAX) * 2
02:-:-:-:1      ISCADD   txa, blkA, tidAX, 7;
--:-:-:-:1      XMAD.LO2 ta,  lda,  tidY, txa;
--:-:-:-:1      LEA      trackA0.CC, ta, param_A[0],     0x1;
--:-:-:-:1      LEA.HI.X trackA1,    ta, param_A[1], RZ, 0x1;

--:-:-:-:1      ISETP.LT.AND P5, PT, txa, param_m, PT;

<CODE>
    our $vec;
    return $vec ? '' : q{
--:-:-:-:1      IADD txa64, txa, 64;
--:-:-:-:1      ISETP.LT.AND P4, PT, txa64, param_m, PT;
    };
</CODE>

// trackB += (blkB*32 + ldb*tidY + tidBX) * 2
04:-:-:-:1      ISCADD   txb, blkB, tidBX, 5;
--:-:-:-:1      XMAD.LO2 tb,  ldb,  tidY, txb;
--:-:-:-:1      LEA      trackB0.CC, tb, param_B[0],     0x1;
--:-:-:-:0      LEA.HI.X trackB1,    tb, param_B[1], RZ, 0x1;

--:-:-:-:1      ISETP.LT.AND P6, PT, txb, param_n, PT;

// Start the write buffers high
// writeAs = (128*tidY + tidAX) * 4
--:-:-:-:1      ISCADD writeAs, tidY, tidAX, 7;
--:-:-:-:1      ISCADD writeAs, writeAs, 4x<32*8 + 128*8>, 2;
// writeBs = (32*tidY + tidBX) * 4
--:-:-:-:1      ISCADD writeBs, tidY, tidBX, 5;
--:-:-:-:1      ISCADD writeBs, writeBs, 4x<32*8 + 128*8*2>, 2;

// Start the read buffers low
// readAs  = (((tid & 0x70) >> 3) | (tid & 1)) << 4;
--:-:-:-:1      LOP.AND readAs, tid,    0x70;
--:-:-:-:1      SHR.U32 readAs, readAs, 3;
--:-:-:-:1      LOP.OR  readAs, readAs, tid1;
--:-:-:-:1      SHL     readAs, readAs, 4;
// readBs = ((tid >> 1) & 7) << 4 + 4x<128*8>;
--:-:-:-:1      BFE.U32 readBs, tid,    0x301; // 3 bits at position 1
--:-:-:-:1      ISCADD  readBs, readBs, 4x<128*8>, 4;

--:-:-:-:1      MOV32I swapBuf, -4x<32*8 + 128*8>;
</SCHEDULE_BLOCK>

<CODE>
    return join '', map sprintf("--:-:1:-:1      LDS.U.128 czero%02d, [addr_zero];\n", $_ * 4), 0..7;
</CODE>

REMAINDER:

<SCHEDULE_BLOCK>

<CODE>
    our $vec;
    return $vec ? q{
// doLoad = tidY < k && txa|txb < n|m
--:-:-:-:1      ISETP.LT.AND P2, PT, tidY, k, P5;
--:-:-:-:1      ISETP.LT.AND P3, PT, tidY, k, P6;

<ORDERED>
--:-:2:-:1  @P2 LDG.E.CI.128 loadA0, [trackA];
--:-:4:-:1  @P3 LDG.E.CI     loadB0, [trackB];

--:-:5:-:1 @!P2 LDS.U.128 loadA0, [addr_zero];
--:-:6:-:1 @!P3 LDS       loadB0, [addr_zero];
</ORDERED>

    } : q{
--:-:-:-:1      ISETP.LT.AND P6, PT, txb, param_n, PT;
// doLoadA = tidY < k && txa < m
// doLoadB = tidY < k && txb < n
--:-:-:-:1      IADD x1,  txa, 1;
--:-:-:-:1      IADD x2,  txa, 2;
--:-:-:-:1      IADD x3,  txa, 3;
--:-:-:-:1      IADD x65, txa, 65;
--:-:-:-:1      IADD x66, txa, 66;
--:-:-:-:1      IADD x67, txa, 67;
--:-:-:-:1      ISETP.LT.AND P0, PT, tidY, k, P5;
--:-:-:-:1      ISETP.LT.AND P1, PT, x1, param_m, P0;
--:-:-:-:1      ISETP.LT.AND P2, PT, x2, param_m, P0;
--:-:-:-:1      ISETP.LT.AND P3, PT, x3, param_m, P0;
<ORDERED>
--:-:2:-:1  @P0 LDG.E.CI.S16 loadA0, [trackA + 2x<00 + 0>];
--:-:2:-:1  @P1 LDG.E.CI.S16 loadA1, [trackA + 2x<00 + 1>];
--:-:2:-:1  @P2 LDG.E.CI.S16 loadA2, [trackA + 2x<00 + 2>];
--:-:2:-:1  @P3 LDG.E.CI.S16 loadA3, [trackA + 2x<00 + 3>];
</ORDERED>
--:-:-:-:1 @!P0 MOV loadA0, RZ;
--:-:-:-:1 @!P1 MOV loadA1, RZ;
--:-:-:-:1 @!P2 MOV loadA2, RZ;
--:-:-:-:1 @!P3 MOV loadA3, RZ;

--:-:-:-:1      ISETP.LT.AND P0, PT, tidY, k, P4;
--:-:-:-:1      ISETP.LT.AND P1, PT, x65, param_m, P0;
--:-:-:-:1      ISETP.LT.AND P2, PT, x66, param_m, P0;
--:-:-:-:1      ISETP.LT.AND P3, PT, x67, param_m, P0;
<ORDERED>
--:-:3:-:1  @P0 LDG.E.CI.S16 loadA4, [trackA + 2x<00 + 64>];
--:-:3:-:1  @P1 LDG.E.CI.S16 loadA5, [trackA + 2x<00 + 65>];
--:-:3:-:1  @P2 LDG.E.CI.S16 loadA6, [trackA + 2x<00 + 66>];
--:-:3:-:1  @P3 LDG.E.CI.S16 loadA7, [trackA + 2x<00 + 67>];
</ORDERED>
--:-:-:-:1 @!P0 MOV loadA4, RZ;
--:-:-:-:1 @!P1 MOV loadA5, RZ;
--:-:-:-:1 @!P2 MOV loadA6, RZ;
--:-:-:-:1 @!P3 MOV loadA7, RZ;

--:-:-:-:1      IADD y1, txb, 1;
--:-:-:-:1      ISETP.LT.AND P0, PT, tidY, k, P6;
--:-:-:-:1      ISETP.LT.AND P1, PT, y1, param_n, P0;
<ORDERED>
--:-:4:-:1  @P0 LDG.E.CI.S16 loadB0, [trackB + 2x<00 + 0>];
--:-:4:-:1  @P1 LDG.E.CI.S16 loadB1, [trackB + 2x<00 + 1>];
</ORDERED>
--:-:-:-:1 @!P0 MOV loadB0, RZ;
--:-:-:-:1 @!P1 MOV loadB1, RZ;
    };
</CODE>

</SCHEDULE_BLOCK>

<CODE>
    our $vec;
    return $vec ? q{
// bDoRemainder = k & 7 && k > 8
--:-:-:-:0      LOP.AND.NZ P1, RZ, k, 7;

12:-:-:-:4      F2F.F32.F16 loadA7, loadA3.H1;
--:-:-:-:4      F2F.F32.F16 loadA6, loadA3.H0;
--:-:-:-:4      F2F.F32.F16 loadA5, loadA2.H1;
--:-:2:-:4      F2F.F32.F16 loadA4, loadA2.H0;

--:-:-:-:0      IADD   trackA0.CC, trackA0, lda8;

--:-:-:-:4      F2F.F32.F16 loadA3, loadA1.H1;
--:-:-:-:4      F2F.F32.F16 loadA2, loadA1.H0;
--:-:-:-:4      F2F.F32.F16 loadA1, loadA0.H1;
--:-:-:-:0      ISETP.GT.AND P1, PT, k, 8, P1;
--:-:3:-:1      F2F.F32.F16 loadA0, loadA0.H0;

--:-:-:-:0      IADD.X trackA1, trackA1, RZ;

02:-:-:-:1      STS.128 [writeAs + 4x<4>], loadA4;
04:-:-:-:1      STS.128 [writeAs + 4x<0>], loadA0;

28:-:-:-:4      F2F.F32.F16 loadB1, loadB0.H1;
--:-:-:-:0      IADD   trackB0.CC, trackB0, ldb8;
--:-:2:-:6      F2F.F32.F16 loadB0, loadB0.H0;

--:-:-:-:0      IADD.X trackB1, trackB1, RZ;

02:-:-:-:1      STS.64 [writeBs], loadB0;

    // scalar loads
    } : q{
// bDoRemainder = k > 8
--:-:-:-:0      ISETP.GT.AND P1, PT, k, 8, PT;

02:-:-:-:4      F2F.F32.F16 loadA0, loadA0;
--:-:-:-:4      F2F.F32.F16 loadA1, loadA1;
--:-:-:-:4      F2F.F32.F16 loadA2, loadA2;
--:-:2:-:4      F2F.F32.F16 loadA3, loadA3;

04:-:-:-:4      F2F.F32.F16 loadA4, loadA4;
--:-:-:-:0      IADD   trackA0.CC, trackA0, lda8;
--:-:-:-:4      F2F.F32.F16 loadA5, loadA5;
--:-:-:-:4      F2F.F32.F16 loadA6, loadA6;
--:-:3:-:1      F2F.F32.F16 loadA7, loadA7;

--:-:-:-:0      IADD.X trackA1, trackA1, RZ;

02:-:-:-:1      STS.128 [writeAs + 4x<00>], loadA0;
04:-:-:-:1      STS.128 [writeAs + 4x<64>], loadA4;

08:-:-:-:4      F2F.F32.F16 loadB1, loadB1;
--:-:-:-:0      IADD   trackB0.CC, trackB0, ldb8;
--:-:2:-:6      F2F.F32.F16 loadB0, loadB0;

--:-:-:-:0      IADD.X trackB1, trackB1, RZ;

02:-:-:-:1      STS.64 [writeBs], loadB0;

    };
</CODE>

--:-:-:-:1      IADD readAs,  readAs, -swapBuf;
--:-:-:-:0      IADD readBs,  readBs, -swapBuf;
01:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      IADD writeAs, writeAs, swapBuf;
--:-:-:-:1      IADD writeBs, writeBs, swapBuf;
--:-:-:-:0      IADD swapBuf, RZ, -swapBuf;



<CODE>
    our $vec;
    my $k_end = $vec ? 16 : 24;
    our @top = ("--:-:-:-:1      ISETP.GE.AND P2, PT, k, $k_end, P5;\n");

    our %insert =
    (
        ($vec ? 
            (
        j0c1  => "--:-:-:-:1      ISETP.GE.AND P3, PT, k, $k_end, P6;\n",
        j0c3  => "--:-:-:-:1      ISETP.GE.AND P0, PT, k, $k_end, PT;\n",

        j0c5  => "--:-:-:-:1      IADD32I k, k, -8;\n",
        j0c9  => "--:-:2:-:1  \@P2 LDG.E.CI.128 loadA, [trackA];\n",
        j0c12 => "--:-:4:-:1  \@P3 LDG.E.CI     loadB, [trackB];\n",

        j5c9  => "02:-:-:-:1  \@P2 F2F.F32.F16 loadA7, loadA3.H1;\n",
        j5c12 => "--:-:-:-:1  \@P2 F2F.F32.F16 loadA6, loadA3.H0;\n",
        j5c16 => "--:-:-:-:1  \@P2 F2F.F32.F16 loadA5, loadA2.H1;\n",
        j5c19 => "--:-:2:-:1  \@P2 F2F.F32.F16 loadA4, loadA2.H0;\n",
        j5c23 => "--:-:-:-:1  \@P2 F2F.F32.F16 loadA3, loadA1.H1;\n",
        j5c27 => "--:-:-:-:1  \@P2 F2F.F32.F16 loadA2, loadA1.H0;\n",
        j5c31 => "--:-:-:-:1  \@P2 F2F.F32.F16 loadA1, loadA0.H1;\n",
        j6c3  => "--:-:3:-:1  \@P2 F2F.F32.F16 loadA0, loadA0.H0;\n",

        j5c10 => "--:-:-:-:1  \@P0 IADD   trackA0.CC, trackA0, lda8;\n",
        j5c17 => "--:-:-:-:1  \@P0 IADD.X trackA1,    trackA1, RZ;\n",

        j6c7  => "08:-:-:-:1  \@P3 F2F.F32.F16 loadB1, loadB0.H1;\n",
        j6c10 => "--:-:4:-:1  \@P3 F2F.F32.F16 loadB0, loadB0.H0;\n",

        j6c8  => "--:-:-:-:1  \@P3 IADD   trackB0.CC, trackB0, ldb8;\n",
        j6c13 => "--:-:-:-:1  \@P3 IADD.X trackB1,    trackB1, RZ;\n",

        j6c6  => "02:-:-:-:1  \@P0 STS.128 [writeAs + 4x<4>], loadA4;\n",
        j6c17 => "04:-:-:-:1  \@P0 STS.128 [writeAs + 4x<0>], loadA0;\n",

        j6c25 => "08:-:-:-:1  \@P0 STS.64 [writeBs], loadB0;\n",
            ) : 
            (
        j0c1  => "--:-:-:-:1      ISETP.GT.AND P3, PT, k, $k_end, P4;\n",
        j0c3  => "--:-:-:-:1      ISETP.GT.AND P6, PT, k, $k_end, P6;\n",
        j0c5  => "--:-:-:-:1      ISETP.GT.AND P0, PT, k, $k_end, PT;\n",
        j0c6  => "--:-:-:-:1      IADD32I k, k, -8;\n",

        j0c8  => "--:-:2:-:1  \@P2 LDG.E.CI.S16 loadA0, [trackA + 2x<0>];\n",
        j0c10 => "--:-:2:-:1  \@P2 LDG.E.CI.S16 loadA1, [trackA + 2x<1>];\n",
        j0c12 => "--:-:2:-:1  \@P2 LDG.E.CI.S16 loadA2, [trackA + 2x<2>];\n",
        j0c14 => "--:-:2:-:1  \@P2 LDG.E.CI.S16 loadA3, [trackA + 2x<3>];\n",

        j0c20 => "--:-:3:-:1  \@P3 LDG.E.CI.S16 loadA4, [trackA + 2x<64>];\n",
        j0c22 => "--:-:3:-:1  \@P3 LDG.E.CI.S16 loadA5, [trackA + 2x<65>];\n",
        j0c24 => "--:-:3:-:1  \@P3 LDG.E.CI.S16 loadA6, [trackA + 2x<66>];\n",
        j0c26 => "--:-:3:-:1  \@P3 LDG.E.CI.S16 loadA7, [trackA + 2x<67>];\n",

        j1c10 => "--:-:4:-:1  \@P6 LDG.E.CI.S16 loadB0, [trackB + 2x<0>];\n",
        j1c12 => "--:-:4:-:1  \@P6 LDG.E.CI.S16 loadB1, [trackB + 2x<1>];\n",

        j5c8  => "02:-:-:-:1  \@P2 F2F.F32.F16 loadA0, loadA0;\n",
        j5c12 => "--:-:-:-:1  \@P2 F2F.F32.F16 loadA1, loadA1;\n",
        j5c16 => "--:-:-:-:1  \@P2 F2F.F32.F16 loadA2, loadA2;\n",
        j5c20 => "--:-:2:-:1  \@P2 F2F.F32.F16 loadA3, loadA3;\n",
        j5c24 => "04:-:-:-:1  \@P3 F2F.F32.F16 loadA4, loadA4;\n",
        j5c27 => "--:-:-:-:1  \@P3 F2F.F32.F16 loadA5, loadA5;\n",
        j5c31 => "--:-:-:-:1  \@P3 F2F.F32.F16 loadA6, loadA6;\n",
        j6c3  => "--:-:3:-:1  \@P3 F2F.F32.F16 loadA7, loadA7;\n",

        j5c25 => "--:-:-:-:1  \@P0 IADD   trackA0.CC, trackA0, lda8;\n",
        j6c1  => "--:-:-:-:1  \@P0 IADD.X trackA1,    trackA1, RZ;\n",

        j6c7  => "08:-:-:-:1  \@P6 F2F.F32.F16 loadB0, loadB0;\n",
        j6c10 => "--:-:4:-:1  \@P6 F2F.F32.F16 loadB1, loadB1;\n",

        j6c8  => "--:-:-:-:1  \@P6 IADD   trackB0.CC, trackB0, ldb8;\n",
        j6c13 => "--:-:-:-:1  \@P6 IADD.X trackB1,    trackB1, RZ;\n",

        j6c6  => "02:-:-:-:1  \@P0 STS.128 [writeAs + 4x<00>], loadA0;\n",
        j6c17 => "04:-:-:-:1  \@P0 STS.128 [writeAs + 4x<64>], loadA4;\n",

        j6c25 => "08:-:-:-:1  \@P0 STS.64 [writeBs], loadB0;\n",
            )
        ),

        j6c31 => "--:-:-:-:5  \@P0 BAR.SYNC 0;\n" .
                 "--:-:-:-:1  \@P0 IADD readAs,  readAs, -swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD readBs,  readBs, -swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD writeAs, writeAs, swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD writeBs, writeBs, swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD swapBuf, RZ,     -swapBuf;\n",

        j7c31 => "--:-:-:Y:5  \@P0 BRA.U LOOP;\n" .
                 "--:-:-:Y:5  \@P1 BRA.U REMAINDER;\n",
    );
    return;
</CODE>

<INCLUDE file="nervanagpu/kernels/sass/hgemm_common_128x32.sass"/>