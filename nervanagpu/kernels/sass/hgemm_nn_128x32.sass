# Kernel: hgemm_nn_128x32

# Copyright 2014 Nervana Systems Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


<CONSTANT_MAPPING>
    addr_zero  : 4x<128*8*2 + 32*8*2 + 0>

    gridDimA : c[0x0][0x14]
    gridDimB : c[0x0][0x18]

    param_Rand[0]   : c[0x0][0x140]
    param_Rand[1]   : c[0x0][0x144]
    param_A[0]      : c[0x0][0x148]
    param_A[1]      : c[0x0][0x14c]
    param_B[0]      : c[0x0][0x150]
    param_B[1]      : c[0x0][0x154]
    param_C[0]      : c[0x0][0x158]
    param_C[1]      : c[0x0][0x15c]
    param_lda       : c[0x0][0x160]
    param_ldb       : c[0x0][0x164]
    param_ldc       : c[0x0][0x168]
    param_m         : c[0x0][0x16c]
    param_n         : c[0x0][0x170]
    param_k         : c[0x0][0x174]
    param_alpha     : c[0x0][0x178]
    param_beta      : c[0x0][0x17c]
    param_flags     : c[0x0][0x180]
</CONSTANT_MAPPING>

<REGISTER_MAPPING>

    0-31 ~ tid, blkA, blkB, tidAX, tidBX, lda, ldb, tid1, tid7, txa, txa1, ta, xmad_ta, tb, xmad_tb, dimA, flag

    0-31 : czero<00-31>

     3, 2,11,10 : cx<0-3>y0
     7, 6,15,14 : cx<0-3>y1
     1, 0, 9, 8 : cx<0-3>y2
     5, 4,13,12 : cx<0-3>y3
    19,18,27,26 : cx<0-3>y4
    23,22,31,30 : cx<0-3>y5
    17,16,25,24 : cx<0-3>y6
    21,20,29,28 : cx<0-3>y7

    32-43 ~ k<1-3>, x1

    44-45 : Rand<0-1>

    32-43 : j0Ay<0-7>, j0Bx<0-3>
    44-55 : j1Ay<0-7>, j1Bx<0-3>

    56-69 : loadA<0-7>, loadAA<0-3>,  loadB<0-1>
    70-75 : track0A<0-1>, track1A<0-1>, trackB<0-1>

    76-84 ~ writeAs, writeBs, k, ldb8, txb, tidAY, tidBY, swapBuf, ge16
    85-88 ~ readAs, readBs, tbid, seed

    32-39 : C00y<0-1>, C04y<0-1>, C08y<0-1>, C12y<0-1>
    40-47 : c<0-3>, d3, d2, d1, d0
    40-47 ~ ldc, cx, ci, xmad_c, clk_shf1, clk_shf2, tid31, tid96
    48-84 ~ threadId, blockA, blockB, lfsr<0-2>, ldc1, ldc4, ldc60, writeCs, readCs, cy<00|04|08|12>, alpha, beta, exp<0-3>, rand<0-3>, lfsr<0-2>_1, lfsr<0-2>_2, flags

</REGISTER_MAPPING>

--:-:1:-:1      S2R tid,  SR_TID.X;
--:-:2:-:1      S2R blkA, SR_CTAID.X;
--:-:3:-:1      S2R blkB, SR_CTAID.Y;

<SCHEDULE_BLOCK>
--:-:-:-:1      MOV k,   param_k;
--:-:-:-:1      MOV lda, param_lda;
--:-:-:-:1      MOV ldb, param_ldb;
--:-:-:-:1      SHL ldb8, ldb, 4;
--:-:-:-:1      MOV32I ge16, 0xfffffff0;

--:-:-:-:1      STS.128 [addr_zero], RZ;

// Grab a seed for this thread
// (blkB*gridDimA*256 + blkA*256 + tid) & (1024*256 - 1)
--:-:-:-:1      MOV flag, param_flags;
--:-:-:-:1      LOP.AND.NZ P4, RZ, flag, 0x1;
--:-:-:-:1      MOV dimA, gridDimA;
03:-:-:-:1      ISCADD tbid, blkA, tid, 8;
04:-:-:-:1      XMAD.U16.U16 dimA, blkB, dimA, RZ;
--:-:-:-:1      ISCADD tbid, dimA, tbid, 8;
--:-:-:-:1      LOP.AND seed, tbid, 1x<2048*32 - 1>;
--:-:-:-:1      LEA      Rand0.CC, seed, param_Rand[0],     2;
--:-:-:-:1      LEA.HI.X Rand1,    seed, param_Rand[1], RZ, 2;
--:-:-:-:1  @P4 LDG.E.CS seed, [Rand];

// tidAX = tid & 0xfe
// tidAY = (tid & 1) << 2
01:-:-:-:1      LOP.AND tidAX, tid, 0xfe;
--:-:-:-:1      LOP.AND tid1,  tid,  1;
--:-:-:-:1      SHL     tidAY, tid1, 2;

// trackA += 2 * ((blkA*128 + tidAX) * lda + tidAY)
02:-:-:-:1      ISCADD  txa, blkA, tidAX, 7;
--:-:-:-:1      XMAD.LO ta, lda, txa, tidAY, xmad_ta;
--:-:-:-:1      LEA      track0A0.CC, ta,  param_A[0],     1;
--:-:-:-:1      LEA.HI.X track0A1,    ta,  param_A[1], RZ, 1;
--:-:-:-:1      LEA      track1A0.CC, lda, track0A0,       1;
--:-:-:-:1      LEA.HI.X track1A1,    lda, track0A1, RZ,   1;

--:-:-:-:1      ISETP.LT.AND P4, PT, txa,  param_m, PT;
--:-:-:-:1      IADD txa1, txa, 1;
--:-:-:-:1      ISETP.LT.AND P5, PT, txa1, param_m, PT;

// tidBX = (tid & 15) << 1
// tidBY = (tid >> 4) & 7
--:-:-:-:1      LOP.AND tidBX, tid,  15;
--:-:-:-:1      SHL     tidBX, tidBX, 1;
--:-:-:-:1      BFE.U32 tidBY, tid,  0x304; // 3 bits at position 4

// trackB += (blkB*32 + ldb*tidBY + tidBX) * 2
04:-:-:-:1      ISCADD   txb, blkB, tidBX, 5;
--:-:-:-:1      XMAD.LO2 tb,  ldb,  tidBY, txb;
--:-:-:-:1      LEA      trackB0.CC, tb, param_B[0],     1;
--:-:-:-:0      LEA.HI.X trackB1,    tb, param_B[1], RZ, 1;

--:-:-:-:1      ISETP.LT.AND P6, PT, txb, param_n, PT;

// Start the write buffers high
// writeAs = (128*tidAY + tidAX) * 4
--:-:-:-:1      ISCADD writeAs, tidAY, tidAX, 7;
--:-:-:-:1      ISCADD writeAs, writeAs, 4x<32*8 + 128*8>, 2;
// writeBs = (32*tidBY + tidBX) * 4
--:-:-:-:1      ISCADD writeBs, tidBY, tidBX, 5;
--:-:-:-:1      ISCADD writeBs, writeBs, 4x<32*8 + 128*8*2>, 2;

// Start the read buffers low
// readAs  = (((tid & 0x70) >> 3) | (tid & 1)) << 4;
--:-:-:-:1      LOP.AND readAs, tid,    0x70;
--:-:-:-:1      SHR.U32 readAs, readAs, 3;
--:-:-:-:1      LOP.OR  readAs, readAs, tid1;
--:-:-:-:1      SHL     readAs, readAs, 4;
// readBs = ((tid >> 1) & 7) << 4 + 4x<128*8>;
--:-:-:-:1      BFE.U32 readBs, tid,    0x301; // 3 bits at position 1
--:-:-:-:1      ISCADD  readBs, readBs, 4x<128*8>, 4;

--:-:-:-:1      MOV32I swapBuf, -4x<32*8 + 128*8>;
</SCHEDULE_BLOCK>

<CODE>
    return join '', map sprintf("--:-:1:-:1      LDS.U.128 czero%02d, [addr_zero];\n", $_ * 4), 0..7;
</CODE>

REMAINDER:

<CODE>
    our $vec;
    return $vec ? q{
--:-:6:-:1  @P6 LDG.E.CI    loadB0,  [trackB];

--:-:2:-:1  @P5 LDG.E.CI.64 loadA2,  [track1A + 2x<0>];
--:-:2:-:1  @P5 LDG.E.CI.64 loadAA2, [track1A + 2x<8>];

--:-:3:-:1  @P4 LDG.E.CI.64 loadA0,  [track0A + 2x<0>];
--:-:3:-:1  @P4 LDG.E.CI.64 loadAA0, [track0A + 2x<8>];

--:-:-:-:0      PSETP.AND.AND P1, PT, PT, PT, PT;

--:-:4:-:1 @!P6 LDS      loadB0,  [addr_zero];
--:-:5:-:1 @!P5 LDS.U.64 loadA2,  [addr_zero];
--:-:5:-:1 @!P4 LDS.U.64 loadA0,  [addr_zero];
--:-:-:-:1 @!P5 LDS.U.64 loadAA2, [addr_zero];
--:-:-:-:1 @!P4 LDS.U.64 loadAA0, [addr_zero];
    } : q{

<SCHEDULE_BLOCK>
--:-:-:-:1      ISETP.LT.AND P6, PT, txb, param_n, PT;
// doLoad0 = tidBY < k
--:-:-:-:1      IADD x1, txb, 1;
--:-:-:-:1      ISETP.LT.AND P0, PT, tidBY, k, P6;
--:-:-:-:1      ISETP.LT.AND P1, PT, x1, param_n, P0;
<ORDERED>
--:-:6:-:1  @P0 LDG.E.CI.S16 loadB0, [trackB + 2x<0>];
--:-:6:-:1  @P1 LDG.E.CI.S16 loadB1, [trackB + 2x<1>];
</ORDERED>
--:-:-:-:1 @!P0 MOV loadB0, RZ;
--:-:-:-:1 @!P1 MOV loadB1, RZ;

--:-:-:-:1      IADD k1, tidAY, 1;
--:-:-:-:1      IADD k2, tidAY, 2;
--:-:-:-:1      IADD k3, tidAY, 3;
--:-:-:-:1      ISETP.LT.AND P0, PT, tidAY, k, P4;
--:-:-:-:1      ISETP.LT.AND P1, PT, k1, k, P4;
--:-:-:-:1      ISETP.LT.AND P2, PT, k2, k, P4;
--:-:-:-:1      ISETP.LT.AND P3, PT, k3, k, P4;
<ORDERED>
--:-:2:-:1  @P0 LDG.E.CI.S16 loadA0, [track0A + 2x<0>];
--:-:2:-:1  @P1 LDG.E.CI.S16 loadA2, [track0A + 2x<1>];
--:-:2:-:1  @P2 LDG.E.CI.S16 loadA4, [track0A + 2x<2>];
--:-:2:-:1  @P3 LDG.E.CI.S16 loadA6, [track0A + 2x<3>];
</ORDERED>
--:-:-:-:1 @!P0 MOV loadA0, RZ;
--:-:-:-:1 @!P1 MOV loadA2, RZ;
--:-:-:-:1 @!P2 MOV loadA4, RZ;
--:-:-:-:1 @!P3 MOV loadA6, RZ;

--:-:-:-:1      ISETP.LT.AND P0, PT, tidAY, k, P5;
--:-:-:-:1      ISETP.LT.AND P1, PT, k1, k, P5;
--:-:-:-:1      ISETP.LT.AND P2, PT, k2, k, P5;
--:-:-:-:1      ISETP.LT.AND P3, PT, k3, k, P5;
<ORDERED>
--:-:3:-:1  @P0 LDG.E.CI.S16 loadA1, [track1A + 2x<0>];
--:-:3:-:1  @P1 LDG.E.CI.S16 loadA3, [track1A + 2x<1>];
--:-:3:-:1  @P2 LDG.E.CI.S16 loadA5, [track1A + 2x<2>];
--:-:3:-:1  @P3 LDG.E.CI.S16 loadA7, [track1A + 2x<3>];
</ORDERED>
--:-:-:-:1 @!P0 MOV loadA1, RZ;
--:-:-:-:1 @!P1 MOV loadA3, RZ;
--:-:-:-:1 @!P2 MOV loadA5, RZ;
--:-:-:-:1 @!P3 MOV loadA7, RZ;

</SCHEDULE_BLOCK>
    };
</CODE>

<CODE>
    our $vec;
    return $vec ? q{
28:-:-:-:4      F2F.F32.F16 loadB1, loadB0.H1;
--:-:-:-:0      IADD   trackB0.CC, trackB0, ldb8;
--:-:4:-:6      F2F.F32.F16 loadB0, loadB0.H0;

--:-:-:-:0      IADD.X trackB1, trackB1, RZ;

08:-:-:-:1      STS.64 [writeBs], loadB0;

12:-:-:-:4      F2F.F32.F16 loadA7, loadA3.H1;
04:-:2:-:4      F2F.F32.F16 loadA6, loadA1.H1;
--:-:-:-:0      IADD   track0A0.CC, track0A0, 2x<16>;
--:-:-:-:4      F2F.F32.F16 loadA5, loadA3.H0;
--:-:3:-:4      F2F.F32.F16 loadA4, loadA1.H0;
--:-:-:-:0      IADD.X track0A1, track0A1, RZ;
--:-:-:-:4      F2F.F32.F16 loadA3, loadA2.H1;
--:-:-:-:0      IADD   track1A0.CC, track1A0, 2x<16>;
--:-:-:-:4      F2F.F32.F16 loadA1, loadA2.H0;
--:-:4:-:4      F2F.F32.F16 loadA2, loadA0.H1;
--:-:5:-:1      F2F.F32.F16 loadA0, loadA0.H0;

--:-:-:-:0      IADD.X track1A1, track1A1, RZ;

02:-:-:-:1      STS.64 [writeAs + 4x<3*128>], loadA6;
04:-:-:-:1      STS.64 [writeAs + 4x<2*128>], loadA4;
08:-:-:-:1      STS.64 [writeAs + 4x<1*128>], loadA2;
10:-:-:-:1      STS.64 [writeAs + 4x<0*128>], loadA0;

    } : q{

20:-:-:-:4      F2F.F32.F16 loadB0, loadB0;
--:-:-:-:0      IADD   trackB0.CC, trackB0, ldb8;
--:-:6:-:6      F2F.F32.F16 loadB1, loadB1;

--:-:-:-:0      IADD.X trackB1, trackB1, RZ;

20:-:-:-:1      STS.64 [writeBs], loadB0;

02:-:-:-:4      F2F.F32.F16 loadA0, loadA0;
04:-:2:-:4      F2F.F32.F16 loadA1, loadA1;
--:-:-:-:0      IADD   track0A0.CC, track0A0, 2x<8>;
--:-:-:-:4      F2F.F32.F16 loadA2, loadA2;
--:-:3:-:4      F2F.F32.F16 loadA3, loadA3;
--:-:-:-:0      IADD.X track0A1, track0A1, RZ;
--:-:-:-:4      F2F.F32.F16 loadA4, loadA4;
--:-:-:-:0      IADD   track1A0.CC, track1A0, 2x<8>;
--:-:4:-:4      F2F.F32.F16 loadA5, loadA5;
--:-:-:-:4      F2F.F32.F16 loadA6, loadA6;
--:-:-:-:0      IADD.X track1A1, track1A1, RZ;
--:-:5:-:1      F2F.F32.F16 loadA7, loadA7;

--:-:-:-:0      ISETP.GT.AND P1, PT, k, 8, PT;

02:-:-:-:1      STS.64 [writeAs + 4x<0*128>], loadA0;
04:-:-:-:1      STS.64 [writeAs + 4x<1*128>], loadA2;
08:-:-:-:1      STS.64 [writeAs + 4x<2*128>], loadA4;
10:-:-:-:1      STS.64 [writeAs + 4x<3*128>], loadA6;
    };
</CODE>

--:-:-:-:1      IADD readBs,  readBs, -swapBuf;
--:-:-:-:0      IADD readAs,  readAs, -swapBuf;
01:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      IADD writeBs, writeBs, swapBuf;
--:-:-:-:1      IADD writeAs, writeAs, swapBuf;
--:-:-:-:0      IADD swapBuf, RZ, -swapBuf;



<CODE>
    our $vec;
    our @top = $vec ? (
        # cute way to avoid stringing together 3 half throughput instructions
        "--:-:-:-:1      ISETP.GE.AND P6, PT, k, 16, P6;\n",
        "--:-:-:-:1      LOP.AND.NZ P0, RZ, k, ge16;\n",
        "--:-:-:-:1      PSETP.AND.AND P1, PT, !P1, PT, PT;\n", 
    ) : (
        "--:-:-:-:2      ISETP.GE.AND P6, PT, k, 24, P6;\n",
        "--:-:-:-:1      ISETP.GE.AND P0, PT, k, 24, PT;\n",
    );
    push @top,  if $vec;
    our %insert =
    (
        j0c6  => "--:-:-:-:1      IADD32I k, k, -8;\n",

        ($vec ? 
            (
        j0c9  => "--:-:6:-:1  \@P6 LDG.E.CI loadB0, [trackB];\n",

        j0c10 => "--:-:-:-:1      PSETP.AND.AND P3, PT, P0, P1, P5;\n",
        j0c11 => "--:-:-:-:1      PSETP.AND.AND P2, PT, P0, P1, P4;\n",
        
        j0c22 => "--:-:2:-:1  \@P3 LDG.E.CI.64 loadA2,  [track1A + 2x<0>];\n",
        j0c24 => "--:-:2:-:1  \@P3 LDG.E.CI.64 loadAA2, [track1A + 2x<8>];\n",

        j0c26 => "--:-:3:-:1  \@P2 LDG.E.CI.64 loadA0,  [track0A + 2x<0>];\n",
        j0c28 => "--:-:5:-:1  \@P2 LDG.E.CI.64 loadAA0, [track0A + 2x<8>];\n",

        j4c3  => "--:-:-:-:1 \@!P1 F2F.F32.F16 loadA7, loadAA3.H1;\n",
        j4c7  => "--:-:-:-:1 \@!P1 F2F.F32.F16 loadA6, loadAA1.H1;\n",
        j4c11 => "--:-:-:-:1 \@!P1 F2F.F32.F16 loadA5, loadAA3.H0;\n",
        j4c15 => "--:-:-:-:1 \@!P1 F2F.F32.F16 loadA4, loadAA1.H0;\n",
        j4c19 => "--:-:-:-:1 \@!P1 F2F.F32.F16 loadA3, loadAA2.H1;\n",
        j4c23 => "--:-:-:-:1 \@!P1 F2F.F32.F16 loadA1, loadAA2.H0;\n",
        j4c27 => "--:-:-:-:1 \@!P1 F2F.F32.F16 loadA2, loadAA0.H1;\n",
        j4c31 => "--:-:-:-:1 \@!P1 F2F.F32.F16 loadA0, loadAA0.H0;\n",

        j5c7  => "20:-:-:-:1  \@P6 F2F.F32.F16 loadB1, loadB0.H1;\n",
        j5c11 => "--:-:6:-:1  \@P6 F2F.F32.F16 loadB0, loadB0.H0;\n",

        j5c15 => "02:-:-:-:1  \@P1 F2F.F32.F16 loadA7, loadA3.H1;\n",
        j5c19 => "04:-:2:-:1  \@P1 F2F.F32.F16 loadA6, loadA1.H1;\n",
        j5c23 => "--:-:-:-:1  \@P1 F2F.F32.F16 loadA5, loadA3.H0;\n",
        j5c27 => "--:-:3:-:1  \@P1 F2F.F32.F16 loadA4, loadA1.H0;\n",
        j5c31 => "--:-:-:-:1  \@P1 F2F.F32.F16 loadA3, loadA2.H1;\n",
        j6c3  => "--:-:-:-:1  \@P1 F2F.F32.F16 loadA1, loadA2.H0;\n",
        j6c7  => "--:-:4:-:1  \@P1 F2F.F32.F16 loadA2, loadA0.H1;\n",
        j6c11 => "10:-:5:-:1  \@P1 F2F.F32.F16 loadA0, loadA0.H0;\n",

        j6c12 => "--:-:-:-:1  \@P0 IADD   trackB0.CC,  trackB0,  ldb8;\n",
        j6c17 => "--:-:-:-:1  \@P0 IADD.X trackB1,     trackB1,  RZ;\n",
        j6c18 => "--:-:-:-:1  \@P1 IADD   track0A0.CC, track0A0, 2x<16>;\n",
        j6c24 => "--:-:-:-:1  \@P1 IADD.X track0A1,    track0A1, RZ;\n",
        j6c25 => "--:-:-:-:1  \@P1 IADD   track1A0.CC, track1A0, 2x<16>;\n",
        j6c30 => "--:-:-:-:1  \@P1 IADD.X track1A1,    track1A1, RZ;\n",

        j5c28 => "20:-:-:-:1  \@P0 STS.64 [writeBs], loadB0;\n",
        j6c5  => "02:-:-:-:1  \@P0 STS.64 [writeAs + 4x<3*128>], loadA6;\n",
        j6c13 => "04:-:-:-:1  \@P0 STS.64 [writeAs + 4x<2*128>], loadA4;\n",
        j6c23 => "08:-:-:-:1  \@P0 STS.64 [writeAs + 4x<1*128>], loadA2;\n",
        j6c27 => "10:-:-:-:1  \@P0 STS.64 [writeAs + 4x<0*128>], loadA0;\n",
            ) :
            (
        j0c1  => "--:-:-:-:1      ISETP.GE.AND P2, PT, k, 24, P4;\n",
        j0c3  => "--:-:-:-:1      ISETP.GE.AND P3, PT, k, 24, P5;\n",

        j0c8  => "--:-:6:-:1  \@P6 LDG.E.CI.S16 loadB0, [trackB + 2x<0>];\n",
        j0c10 => "--:-:6:-:1  \@P6 LDG.E.CI.S16 loadB1, [trackB + 2x<1>];\n",

        j0c12 => "--:-:2:-:1  \@P2 LDG.E.CI.S16 loadA0, [track0A + 2x<0>];\n",
        j0c14 => "--:-:2:-:1  \@P2 LDG.E.CI.S16 loadA2, [track0A + 2x<1>];\n",
        j0c16 => "--:-:2:-:1  \@P2 LDG.E.CI.S16 loadA4, [track0A + 2x<2>];\n",
        j0c18 => "--:-:2:-:1  \@P2 LDG.E.CI.S16 loadA6, [track0A + 2x<3>];\n",

        j0c24 => "--:-:3:-:1  \@P3 LDG.E.CI.S16 loadA1, [track1A + 2x<0>];\n",
        j0c26 => "--:-:3:-:1  \@P3 LDG.E.CI.S16 loadA3, [track1A + 2x<1>];\n",
        j0c28 => "--:-:3:-:1  \@P3 LDG.E.CI.S16 loadA5, [track1A + 2x<2>];\n",
        j0c30 => "--:-:3:-:1  \@P3 LDG.E.CI.S16 loadA7, [track1A + 2x<3>];\n",

        j5c7  => "20:-:-:-:1  \@P6 F2F.F32.F16 loadB0, loadB0;\n",
        j5c11 => "--:-:6:-:1  \@P6 F2F.F32.F16 loadB1, loadB1;\n",

        j5c15 => "02:-:-:-:1  \@P2 F2F.F32.F16 loadA0, loadA0;\n",
        j5c19 => "04:-:2:-:1  \@P3 F2F.F32.F16 loadA1, loadA1;\n",
        j5c23 => "--:-:-:-:1  \@P2 F2F.F32.F16 loadA2, loadA2;\n",
        j5c27 => "--:-:3:-:1  \@P3 F2F.F32.F16 loadA3, loadA3;\n",
        j5c31 => "--:-:-:-:1  \@P2 F2F.F32.F16 loadA4, loadA4;\n",
        j6c3  => "--:-:4:-:1  \@P3 F2F.F32.F16 loadA5, loadA5;\n",
        j6c7  => "--:-:-:-:1  \@P2 F2F.F32.F16 loadA6, loadA6;\n",
        j6c11 => "--:-:5:-:1  \@P3 F2F.F32.F16 loadA7, loadA7;\n",
        
        j6c10 => "--:-:-:-:1  \@P0 IADD   trackB0.CC, trackB0, ldb8;\n",
        j6c17 => "--:-:-:-:1  \@P0 IADD.X trackB1,    trackB1, RZ;\n",
        j6c18 => "--:-:-:-:1  \@P0 IADD   track0A0.CC, track0A0, 2x<8>;\n",
        j6c24 => "--:-:-:-:1  \@P0 IADD.X track0A1,    track0A1, RZ;\n",
        j6c25 => "--:-:-:-:1  \@P0 IADD   track1A0.CC, track1A0, 2x<8>;\n",
        j6c30 => "--:-:-:-:1  \@P0 IADD.X track1A1,    track1A1, RZ;\n",

        j5c28 => "20:-:-:-:1  \@P0 STS.64 [writeBs], loadB0;\n",
        j6c5  => "02:-:-:-:1  \@P0 STS.64 [writeAs + 4x<0*128>], loadA0;\n",
        j6c12 => "04:-:-:-:1  \@P0 STS.64 [writeAs + 4x<1*128>], loadA2;\n",
        j6c19 => "08:-:-:-:1  \@P0 STS.64 [writeAs + 4x<2*128>], loadA4;\n",
        j6c27 => "10:-:-:-:1  \@P0 STS.64 [writeAs + 4x<3*128>], loadA6;\n",
            )
        ),

        j6c31 => "--:-:-:-:5  \@P0 BAR.SYNC 0;\n" .
                 "--:-:-:-:1  \@P0 IADD readAs,  readAs, -swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD readBs,  readBs, -swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD writeAs, writeAs, swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD writeBs, writeBs, swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD swapBuf, RZ,     -swapBuf;\n",

        ($vec ? 
            (j7c31 => "--:-:-:Y:5  \@P0 BRA.U LOOP;\n") :
            (j7c31 => "--:-:-:Y:5  \@P0 BRA.U LOOP;\n--:-:-:Y:5  \@P1 BRA.U REMAINDER;\n")
        ),
    );
    return;
</CODE>

<INCLUDE file="nervanagpu/kernels/sass/hgemm_common_128x32.sass"/>