# Kernel: sconv_updat_C128_K128

# Copyright 2014 Nervana Systems Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


<CONSTANT_MAPPING>
    addr_zero : 4x<128*8*4 + 0>
    addr_m    : 4x<128*8*4 + 4>
    addr_q    : 4x<128*8*4 + 5>
    gridDimI  : c[0x0][0x14]
    gridDimE  : c[0x0][0x18]

    param_Rand[0]      : c[0x0][0x140]
    param_Rand[1]      : c[0x0][0x144]
    param_F[0]         : c[0x0][0x148]
    param_F[1]         : c[0x0][0x14c]
    param_I[0]         : c[0x0][0x150]
    param_I[1]         : c[0x0][0x154]
    param_E[0]         : c[0x0][0x158]
    param_E[1]         : c[0x0][0x15c]
    param_alpha        : c[0x0][0x160]
    param_flags        : c[0x0][0x164]
    param_N            : c[0x0][0x168]
    param_K            : c[0x0][0x16c]
    param_D            : c[0x0][0x170]
    param_H            : c[0x0][0x174]
    param_W            : c[0x0][0x178]
    param_WN           : c[0x0][0x17c]
    param_HWN          : c[0x0][0x180]
    param_DHWN         : c[0x0][0x184]
    param_C            : c[0x0][0x188]
    param_CRST         : c[0x0][0x18c]
    param_RST          : c[0x0][0x190]
    param_magic_RST    : c[0x0][0x194]
    param_shift_RST    : c[0x0][0x198]
    param_RS           : c[0x0][0x19c]
    param_magic_RS     : c[0x0][0x1a0]
    param_shift_RS     : c[0x0][0x1a4]
    param_S            : c[0x0][0x1a8]
    param_magic_S      : c[0x0][0x1ac]
    param_shift_S      : c[0x0][0x1b0]
    param_pad_d        : c[0x0][0x1b4]
    param_pad_h        : c[0x0][0x1b8]
    param_pad_w        : c[0x0][0x1bc]
    param_str_d        : c[0x0][0x1c0]
    param_str_h        : c[0x0][0x1c4]
    param_str_w        : c[0x0][0x1c8]
    param_P            : c[0x0][0x1cc]
    param_Q            : c[0x0][0x1d0]
    param_PQ           : c[0x0][0x1d4]
    param_QN           : c[0x0][0x1d8]
    param_PQN          : c[0x0][0x1dc]
    param_MPQN         : c[0x0][0x1e0]
    param_magic_Q      : c[0x0][0x1e4]
    param_shift_Q      : c[0x0][0x1e8]
    param_magic_PQ     : c[0x0][0x1ec]
    param_shift_PQ     : c[0x0][0x1f0]
    param_grid_P       : c[0x0][0x1f4]
    param_grid_Q       : c[0x0][0x1f8]
    param_grid_PQ      : c[0x0][0x1fc]
 
</CONSTANT_MAPPING>

<REGISTER_MAPPING>

    0-63    ~ tid, blkI, blkE, tidX, tid1, tid7, blkMPQ, magic_PQ, grid_PQ, magic_Q, grid_Q, pq, tid128

    0-63    : czero<00-63>

     3, 2,11,10,19,18,27,26 : cx<0-7>y0
     7, 6,15,14,23,22,31,30 : cx<0-7>y1
     1, 0, 9, 8,17,16,25,24 : cx<0-7>y2
     5, 4,13,12,21,20,29,28 : cx<0-7>y3
    35,34,43,42,51,50,59,58 : cx<0-7>y4
    39,38,47,46,55,54,63,62 : cx<0-7>y5
    33,32,41,40,49,48,57,56 : cx<0-7>y6
    37,36,45,44,53,52,61,60 : cx<0-7>y7

    66-111  ~ QN, PQN, MPQN, WN, HWN, DHWN, str_d, str_h, pad_d, pad_h, mt, pr, y, z, y0, yH, z0, zD, bounds_yz, qs, x, pad_w, str_w, x0, xW, bounds_x, ti, te, m, c, r, t, rst, RS, S, magic_S, magic_RS, RST, magic_RST

    64-79   : j0Ex<0-7>, j0Iy<0-7>
    80-95   : j1Ex<0-7>, j1Iy<0-7>

    96-111  : loadE<0-7>, loadI<0-7>

    112-115 : trackE<0-1>, trackI<0-1>

    116-125 ~ writeS, N, e, i, p, q, k, crst, s, tidY
    126-127 ~ readEs, readIs

     64-79  : c<0-7>, track00F<0-1>, track04F<0-1>, track08F<0-1>, track12F<0-1>
    80-124  ~ threadId, blockI, blockE, writeCs, readCs, K1, K60, crst<00|04|08|12>, alpha, K, K4, tid31, tid96, kk, tf, t128

</REGISTER_MAPPING>

--:-:1:-:1      S2R tid,    SR_TID.X;
--:-:2:-:1      S2R blkI,   SR_CTAID.Y;
--:-:3:-:1      S2R blkE,   SR_CTAID.Z;
--:-:4:-:1      S2R blkMPQ, SR_CTAID.X; # m,p,q stored in z block index

<SCHEDULE_BLOCK>
--:-:-:-:1      STS.128 [addr_zero], RZ;

--:-:-:-:1      LOP.AND tid1,   tid, 1;
--:-:-:-:1      LOP.AND tid128, tid, 128;

// tidX = tid >> 1
// tidY  = tid1 << 2
01:-:-:-:1      SHR.U32 tidX, tid, 1;
--:-:-:-:1      SHL tidY, tid1, 2;

--:-:-:-:1      MOV magic_PQ, param_magic_PQ;
--:-:-:-:1      MOV magic_Q,  param_magic_Q;
--:-:-:-:1      MOV grid_PQ,  param_grid_PQ;
--:-:-:-:1      MOV grid_Q,   param_grid_Q;

// m  = blkMPQ / PQ
// pq = blkMPQ % PQ
08:-:-:-:1      XMAD.LO2 m, magic_PQ, blkMPQ, RZ;
--:-:-:-:1      SHR.U32 m, m, param_shift_PQ;
--:-:-:-:1      VMAD.U16.U16 pq, -m, grid_PQ, blkMPQ;
// p = pq / Q
// q = pq % Q
--:-:-:-:1      XMAD.LO2 p, magic_Q, pq, RZ;
--:-:-:-:1      SHR.U32 p, p, param_shift_Q;
--:-:-:-:1      VMAD.U16.U16 q, -p, grid_Q, pq;

// We need to be able to restore m and q at each P iteration
// Resiter spill to shared
--:-:-:-:1      STS [addr_m], m;
--:-:-:-:1      STS [addr_q], q;

// writeS = 4 * (128 * tidY + tidX) + 4x<128*8*2>
--:-:-:-:1      ISCADD  writeS, tidY, tidX, 7;
--:-:-:-:1      ISCADD  writeS, writeS, 4x<128*8*2>, 2;

// readIs  = (((tid & 0x70) >> 3) | (tid & 1)) << 4
--:-:-:-:1      LOP.AND readIs, tid,    0x70;
--:-:-:-:1      SHR.U32 readIs, readIs, 3;
--:-:-:-:1      LOP.OR  readIs, readIs, tid1;
--:-:-:-:1      SHL     readIs, readIs, 4;

// readEs = ((tid128 >> 4) | ((tid >> 1) & 7)) << 4 + 4096;
--:-:-:-:1      BFE.U32 tid7,   tid,    0x301; // 3 bits at position 1
--:-:-:-:1      SHR.U32 readEs, tid128, 4;
--:-:-:-:1      LOP.OR  readEs, readEs, tid7;
--:-:-:-:1      ISCADD  readEs, readEs, 4x<128*8>, 4;


// k = blockE*128 + tid
04:-:-:-:1      ISCADD k, blkE, tidX, 7;
// crst = blockI*128 + tid
02:-:-:-:1      ISCADD crst, blkI, tidX, 7;

</SCHEDULE_BLOCK>

--:-:-:-:0      MOV czero00, RZ;
--:-:-:-:1      LDS.U.128 czero24, [addr_zero];
--:-:-:-:1      MOV czero01, RZ;
--:-:-:-:0      MOV czero02, RZ;
--:-:-:-:1      LDS.U.128 czero28, [addr_zero];
--:-:-:-:1      MOV czero03, RZ;
--:-:-:-:0      MOV czero04, RZ;
--:-:-:-:1      LDS.U.128 czero28, [addr_zero];
--:-:-:-:1      MOV czero05, RZ;
--:-:-:-:0      MOV czero06, RZ;
--:-:-:-:1      LDS.U.128 czero32, [addr_zero];
--:-:-:-:1      MOV czero07, RZ;
--:-:-:-:0      MOV czero08, RZ;
--:-:-:-:1      LDS.U.128 czero36, [addr_zero];
--:-:-:-:1      MOV czero09, RZ;
--:-:-:-:0      MOV czero10, RZ;
--:-:-:-:1      LDS.U.128 czero40, [addr_zero];
--:-:-:-:1      MOV czero11, RZ;
--:-:-:-:0      MOV czero12, RZ;
--:-:-:-:1      LDS.U.128 czero44, [addr_zero];
--:-:-:-:1      MOV czero13, RZ;
--:-:-:-:0      MOV czero14, RZ;
--:-:-:-:1      LDS.U.128 czero48, [addr_zero];
--:-:-:-:1      MOV czero15, RZ;
--:-:-:-:0      MOV czero16, RZ;
--:-:-:-:1      LDS.U.128 czero52, [addr_zero];
--:-:-:-:1      MOV czero17, RZ;
--:-:-:-:0      MOV czero18, RZ;
--:-:-:-:1      LDS.U.128 czero56, [addr_zero];
--:-:-:-:1      MOV czero19, RZ;
--:-:-:-:0      MOV czero20, RZ;
--:-:-:-:1      LDS.U.128 czero60, [addr_zero];
--:-:-:-:1      MOV czero21, RZ;
--:-:-:-:1      MOV czero22, RZ;
--:-:-:-:0      MOV czero23, RZ;

//<CODE>
//    return join '', map sprintf("--:-:-:-:1      MOV czero%02d, RZ;\n", $_ ), 0..63;
//</CODE>

//<CODE>
//    return join '', map sprintf("--:-:-:-:1      LDS.U.128 czero%02d, [addr_zero];\n", $_ * 4), 0..15;
//</CODE>

NEXT_P:

--:-:2:-:1      LDS m, [addr_m];
--:-:3:-:1      LDS q, [addr_q];

<SCHEDULE_BLOCK>
--:-:-:-:1      MOV QN,          param_QN;
--:-:-:-:1      MOV PQN,         param_PQN;
--:-:-:-:1      MOV MPQN,        param_MPQN;
--:-:-:-:1      MOV pad_d,       param_pad_d;
--:-:-:-:1      MOV pad_h,       param_pad_h;
--:-:-:-:1      MOV str_d,       param_str_d;
--:-:-:-:1      MOV str_h,       param_str_h;
--:-:-:-:1      MOV WN,          param_WN;
--:-:-:-:1      MOV HWN,         param_HWN;
--:-:-:-:1      MOV DHWN,        param_DHWN;

--:-:-:-:1      MOV S,           param_S;
--:-:-:-:1      MOV RS,          param_RS;
--:-:-:-:1      MOV RST,         param_RST;
--:-:-:-:1      MOV magic_S,     param_magic_S;
--:-:-:-:1      MOV magic_RS,    param_magic_RS;
--:-:-:-:1      MOV magic_RST,   param_magic_RST;
// c   = crst / RST
// rst = crst % RST
--:-:-:-:1      XMAD.LO2 c, magic_RST, crst, RZ;
--:-:-:-:1      SHR.U32 c, c, param_shift_RST;
--:-:-:-:1      VMAD.U16.U16 rst, -c, RST, crst;
// t =  rst / RS
// rs = rst % RS
--:-:-:-:1      XMAD.LO2 t, magic_RS, rst, RZ;
--:-:-:-:1      SHR.U32 t, t, param_shift_RS;
--:-:-:-:1      VMAD.U16.U16 rst, -t, RS, rst;
// r = rs / S
// s = rs % S
--:-:-:-:1      XMAD.LO2 r, magic_S, rst, RZ;
--:-:-:-:1      SHR.U32 r, r, param_shift_S;
--:-:-:-:1      VMAD.U16.U16 s, -r, S, rst;

// e = k*MPQN + m*PQN + p*QN + tidY
--:-:-:-:1      XMAD.LO2 e,   QN, p, tidY;
--:-:-:-:1      XMAD.LO2 e,  PQN, m, e;
--:-:-:-:1      XMAD.LO2 e, MPQN, k, e;
// mt = m * w - pad_d 
// pr = p * u - pad_h
02:-:-:-:1      VMAD.U16.U16 mt, m, str_d, -pad_d;
--:-:-:-:1      VMAD.U16.U16 pr, p, str_h, -pad_h;
// y = pr + r
// z = mt + t
--:-:-:-:1      IADD y, pr, r;
--:-:-:-:1      IADD z, mt, t;
// i = c*DHWN + z*HWN + y*WN + tidY
--:-:-:-:1      XMAD.LO2 i,   WN, y, tidY;
--:-:-:-:1      XMAD.LO2 i,  HWN, z, i;
--:-:-:-:1      XMAD.LO2 i, DHWN, c, i;
// bounds_yz = y < 0 || y > H || z < 0 || z > D ? -1 : 0
--:-:-:-:1      ISET.LT.AND y0, y,  RZ, PT;
--:-:-:-:1      ISET.GE.AND yH, y,  param_H, PT;
--:-:-:-:1      ISET.LT.AND z0, z,  RZ, PT;
--:-:-:-:1      ISET.GE.AND zD, z,  param_D, PT;
--:-:-:-:1      LOP.OR   bounds_yz, y0, yH;
--:-:-:-:1      LOP3.LUT bounds_yz, bounds_yz, z0, zD, 0xfe;
// doLoadCRST = crst < CRST && bounds_yz == 0
--:-:-:-:1      ISETP.LT.AND P4, PT, crst, param_CRST, PT;
--:-:-:-:1      ISETP.EQ.AND P4, PT, bounds_yz, RZ, P4;
// p += grid_P
--:-:-:-:1      IADD p, p, param_grid_P;
</SCHEDULE_BLOCK>

NEXT_Q:

<SCHEDULE_BLOCK>

// Load on alternating loops to better group memory transactions
--:-:-:-:1      PSETP.AND.AND P1, PT, PT, PT, PT;

// k < K
--:-:-:-:1      ISETP.LT.AND P3, PT, k, param_K, PT;

--:-:-:-:1      MOV N,           param_N;
--:-:-:-:1      MOV pad_w,       param_pad_w;
--:-:-:-:1      MOV str_w,       param_str_w;
// qs = q * v - pad_w
// x = qs + s
04:-:-:-:1      VMAD.U16.U16 qs, q, str_w, -pad_w;
--:-:-:-:1      IADD x, qs, s;
// bounds_x = x < 0 || x > W ? -1 : 0
--:-:-:-:1      ISET.LT.AND x0, x, RZ, PT;
--:-:-:-:1      ISET.GE.AND xW, x,  param_W, PT;
--:-:-:-:1      LOP.OR bounds_x, x0, xW;
// doLoad = crst < CRST && bounds_yz == 0 && bounds_x == 0
--:-:-:-:1      ISETP.EQ.AND P2, PT, bounds_x, RZ, P4;
// trackI = I + i + x*N
--:-:-:-:1      VMAD.U16.U16 ti, x, N, i;
--:-:-:-:1      LEA      trackI0.CC, ti, param_I[0], 0x2;
--:-:-:-:1      LEA.HI.X trackI1,    ti, param_I[1], RZ, 0x2;
// trackE = E + e + q*N
--:-:-:-:1      VMAD.U16.U16 te, q, N, e;
--:-:-:-:1      LEA      trackE0.CC, te, param_E[0], 0x2;
--:-:-:-:1      LEA.HI.X trackE1,    te, param_E[1], RZ, 0x2;
// q += grid_Q
--:-:-:-:1      IADD q, q, param_grid_Q;

<ORDERED>

--:-:2:-:1  @P2 LDG.E.CI.128 loadI0, [trackI + 4x<0>];
--:-:2:-:1  @P2 LDG.E.CI.128 loadI4, [trackI + 4x<8>];

--:-:3:-:1  @P3 LDG.E.CI.128 loadE0, [trackE + 4x<0>];
--:4:5:-:1  @P3 LDG.E.CI.128 loadE4, [trackE + 4x<8>];

--:-:6:-:1 @!P2 LDS.U.128 loadI0, [addr_zero];
--:-:6:-:1 @!P3 LDS.U.128 loadE0, [addr_zero];
--:-:-:-:1 @!P2 LDS.U.128 loadI4, [addr_zero];
--:-:-:-:1 @!P3 LDS.U.128 loadE4, [addr_zero];
</ORDERED>

</SCHEDULE_BLOCK>

22:-:-:-:1      STS [writeS + 4x<0*128>], loadI0;
--:-:-:-:1      STS [writeS + 4x<1*128>], loadI1;
--:-:-:-:1      STS [writeS + 4x<2*128>], loadI2;
--:-:-:-:1      STS [writeS + 4x<3*128>], loadI3;

--:-:-:-:6      IADD   trackI0.CC, trackI0, 4x<16>;
--:-:-:-:0      IADD.X trackI1, trackI1, RZ;

04:-:-:-:1      STS [writeS + 4x< 8*128>], loadE0;
--:-:-:-:1      STS [writeS + 4x< 9*128>], loadE1;
--:-:-:-:1      STS [writeS + 4x<10*128>], loadE2;
--:-:-:-:1      STS [writeS + 4x<11*128>], loadE3;

08:-:-:-:6      IADD   trackE0.CC, trackE0, 4x<16>;
--:-:-:-:1      IADD.X trackE1, trackE1, RZ;

--:-:-:-:1      LOP.XOR readEs, readEs, 4x<128*8*2>;
--:-:-:-:0      LOP.XOR readIs, readIs, 4x<128*8*2>;
--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:0      LOP.XOR writeS, writeS, 4x<128*8*2>;


--:-:1:-:1      LDS.U.128 j0Ex0, [readEs + 4x<0*128 + 00>];
--:-:1:-:1      LDS.U.128 j0Iy0, [readIs + 4x<0*128 + 00>];
--:-:1:-:1      LDS.U.128 j0Ex4, [readEs + 4x<0*128 + 64>];
--:-:1:-:1      LDS.U.128 j0Iy4, [readIs + 4x<0*128 + 64>];


// P0 loop N
// P1 load alternation
// P2 bounds Iperm
// P3 bounds Eperm
// P4 bounds Iyz
// P5 loop Q / bounds Iloop
// P6 loop P / bounds Eloop

NEXT_8N:

--:-:-:-:1      ISETP.GE.AND P0, PT, N, 16, PT;
<CODE>

    my %insert =
    (
        j0c1  => "--:-:-:-:1      PSETP.AND.AND P1, PT, !P1, PT, PT;\n",
        j0c3  => "--:-:-:-:1      IADD N, N, -8;\n",
        j0c12 => "--:-:-:-:1      PSETP.AND.AND P5, PT, P0, P1, P2;\n",
        j0c13 => "--:-:-:-:1      PSETP.AND.AND P6, PT, P0, P1, P3;\n",

        j0c24 => "--:-:2:-:1  \@P5 LDG.E.CI.128 loadI0, [trackI + 4x<0>];\n",
        j0c26 => "--:-:2:-:1  \@P5 LDG.E.CI.128 loadI4, [trackI + 4x<8>];\n",
        j0c28 => "--:-:3:-:1  \@P6 LDG.E.CI.128 loadE0, [trackE + 4x<0>];\n",
        j0c30 => "10:4:5:-:1  \@P6 LDG.E.CI.128 loadE4, [trackE + 4x<8>];\n",

        j0c34 => "--:-:-:-:1      ISETP.LT.AND P5, PT, q, param_Q, PT;\n",
        j0c36 => "--:-:-:-:1      ISETP.LT.AND P6, PT, p, param_P, PT;\n",

        j3c28 => "--:-:-:-:1 \@!P1 STS [writeS + 4x<0*128>], loadI4;\n",
        j3c30 => "--:-:-:-:1 \@!P1 STS [writeS + 4x<1*128>], loadI5;\n",
        j3c32 => "--:-:-:-:1 \@!P1 STS [writeS + 4x<2*128>], loadI6;\n",
        j3c34 => "--:-:-:-:1 \@!P1 STS [writeS + 4x<3*128>], loadI7;\n",

        j4c28 => "--:-:-:-:1 \@!P1 STS [writeS + 4x< 8*128>], loadE4;\n",
        j4c30 => "--:-:-:-:1 \@!P1 STS [writeS + 4x< 9*128>], loadE5;\n",
        j4c32 => "--:-:-:-:1 \@!P1 STS [writeS + 4x<10*128>], loadE6;\n",
        j4c34 => "--:-:-:-:1 \@!P1 STS [writeS + 4x<11*128>], loadE7;\n",


        j5c29 => "02:-:-:-:1  \@P1 STS [writeS + 4x<0*128>], loadI0;\n",
        j5c31 => "--:-:-:-:1  \@P1 STS [writeS + 4x<1*128>], loadI1;\n",
        j5c33 => "--:-:-:-:1  \@P1 STS [writeS + 4x<2*128>], loadI2;\n",
        j5c35 => "--:-:-:-:1  \@P1 STS [writeS + 4x<3*128>], loadI3;\n",

        j5c46 => "--:-:-:-:1  \@P1 IADD   trackI0.CC, trackI0, 4x<16>;\n",
        j5c54 => "--:-:-:-:1  \@P1 IADD.X trackI1,    trackI1, RZ;\n",

        j6c29 => "04:-:-:-:1  \@P1 STS [writeS + 4x< 8*128>], loadE0;\n",
        j6c31 => "--:-:-:-:1  \@P1 STS [writeS + 4x< 9*128>], loadE1;\n",
        j6c33 => "--:-:-:-:1  \@P1 STS [writeS + 4x<10*128>], loadE2;\n",
        j6c35 => "--:-:-:-:1  \@P1 STS [writeS + 4x<11*128>], loadE3;\n",

        j6c46 => "08:-:-:-:1  \@P1 IADD   trackE0.CC, trackE0, 4x<16>;\n",
        j6c54 => "--:-:-:-:1  \@P1 IADD.X trackE1,    trackE1, RZ;\n",

        j6c62 => "--:-:-:-:5  \@P0 BAR.SYNC 0;\n" .
                 "--:-:-:-:1  \@P0 LOP.XOR readEs, readEs, 4x<128*8*2>;\n" .
                 "--:-:-:-:1  \@P0 LOP.XOR readIs, readIs, 4x<128*8*2>;\n" .
                 "--:-:-:-:1  \@P0 LOP.XOR writeS, writeS, 4x<128*8*2>;\n",

        j7c63 => "--:-:-:Y:5  \@P0 BRA.U NEXT_8N;\n" . 
                 "--:-:-:Y:5  \@P5 BRA.U NEXT_Q;\n" .
                 "--:-:-:Y:5  \@P6 BRA.U NEXT_P;\n",
    );

    my @cOrder;
    my @swirl = ([0,2],[1,2],[1,0],[0,0]);
    my @y = (0,1,4,5);
    foreach my $x (0,2,4,6)
    {
        foreach my $y (@y)
        {
            push @cOrder, [$x + $_->[0], $y + $_->[1]] foreach @swirl;
        }
        @y = reverse @y;
    }

    my $out;
    foreach my $j (0 .. 7)
    {
        my $odd      = $j & 1;
        my $nOdd     = !$odd + 0;
        my $rsOffset = ($j + 1) % 8;
        my $rsPred   = $j == 7 ? '@P0' : '   ';

        $insert{"j${j}c0"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dEx0, [readEs + 4x<%d*128 + 00>];\n", $rsPred, $nOdd, $rsOffset;
        $insert{"j${j}c2"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dIy0, [readIs + 4x<%d*128 + 00>];\n", $rsPred, $nOdd, $rsOffset;
        $insert{"j${j}c4"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dEx4, [readEs + 4x<%d*128 + 64>];\n", $rsPred, $nOdd, $rsOffset;
        $insert{"j${j}c6"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dIy4, [readIs + 4x<%d*128 + 64>];\n", $rsPred, $nOdd, $rsOffset;

        foreach my $c (0 .. 63)
        {
            my ($x,$y) = @{$cOrder[$c]};

            my $ins    = $insert{"j${j}c$c"} || '';

            my $stall  = $ins =~ /LDS|I2I|F2F|LDG|STS|BAR|BRA/ ? 0 : 1;

            my $yield  = $c == 32 && $stall ? 'Y' : '-';

            my $wait   = $c == 0 ? '01' : '--';

            my $ctrl   = "$wait:-:-:$yield:$stall";

            $out .= sprintf "%s      FFMA cx%dy%d, j%dEx%d, j%dIy%d, cx%dy%d;\n%s", $ctrl,  $x,$y,  $odd,$x,  $odd,$y,  $x,$y,  $ins;
        }
    }
    return $out;

</CODE>

--:-:1:-:1      S2R threadId, SR_TID.X;
--:-:2:-:1      S2R blockI,   SR_CTAID.Y;
--:-:3:-:1      S2R blockE,   SR_CTAID.Z;

<SCHEDULE_BLOCK>

--:-:-:-:1      LOP.AND readEs, readEs, 0xfff;
--:-:-:-:1      LOP.AND readIs, readIs, 0xfff;

// writeCs = (readIs / 4) * 128 + readEs;
--:-:-:-:1      ISCADD  writeCs, readIs, readEs, 5;

--:-:-:-:1      LOP.AND tid31,  threadId,  31;
01:-:-:-:1      LOP.AND tid96,  threadId,  96;
--:-:-:-:1      LOP.AND t128,   threadId, 128;

// kk = tid31 | (t128 >> 2);
--:-:-:-:1      SHR.U32  kk, t128, 2;
--:-:-:-:1      LOP.OR   kk, tid31,  kk;

// readCs = ((tid96 << 4) | kk) << 2;
--:-:-:-:1      SHL      readCs, tid96,  4;
--:-:-:-:1      LOP.OR   readCs, readCs, kk;
--:-:-:-:1      SHL      readCs, readCs, 2;

// kk += blkE*128;
04:-:-:-:1      ISCADD  kk, blockE, kk, 7;


// crst = blkI*128 + (tid96 >> 1)
--:-:-:-:1      SHR.U32 crst00, tid96, 1;
02:-:-:-:1      ISCADD  crst00, blockI, crst00, 7;
--:-:-:-:1      IADD    crst04, crst00,  4;
--:-:-:-:1      IADD    crst08, crst00,  8;
--:-:-:-:1      IADD    crst12, crst00,  12;


--:-:-:-:1      MOV K, param_K;
--:-:-:-:1      SHL K1, K, 2;
--:-:-:-:1      SHL K4, K, 4;
--:-:-:-:1      ISCADD K60, K, -K4, 8;

// trackF += crst*K + k;
--:-:-:-:1      VMAD.U16.U16 tf, crst00, K, kk;
--:-:-:-:1      LEA      track00F0.CC, tf, param_F[0],     0x2;
--:-:-:-:1      LEA.HI.X track00F1,    tf, param_F[1], RZ, 0x2;

// kk < K
--:-:-:-:1      ISETP.LT.AND P5, PT, kk, param_K, PT; 
--:-:-:-:1      IADD kk, kk, 64;
--:-:-:-:1      ISETP.LT.AND P6, PT, kk, param_K, PT; 

--:-:-:-:1      MOV alpha, param_alpha;

</SCHEDULE_BLOCK>

--:-:-:-:6      IADD   track04F0.CC, track00F0, K4;
--:-:-:-:1      IADD.X track04F1,    track00F1, RZ;
--:-:-:-:6      IADD   track08F0.CC, track04F0, K4;
--:-:-:-:1      IADD.X track08F1,    track04F1, RZ;
--:-:-:-:6      IADD   track12F0.CC, track08F0, K4;
--:-:-:-:0      IADD.X track12F1,    track08F1, RZ;

--:-:-:-:5      BAR.SYNC 0;

<CODE>

    my $out;
    foreach my $y (0..7)
    {
        $out .=
            "--:-:-:-:5      IADD   track00F0.CC, track00F0, K60;\n" .
            "--:-:-:-:1      IADD   crst00,       crst00,     60;\n" .
            "--:-:-:-:1      IADD.X track00F1,    track00F1,  RZ;\n" .
            "--:-:-:-:5      IADD   track04F0.CC, track04F0, K60;\n" .
            "--:-:-:-:1      IADD   crst04,       crst04,     60;\n" .
            "--:-:-:-:1      IADD.X track04F1,    track04F1,  RZ;\n" .
            "--:-:-:-:5      IADD   track08F0.CC, track08F0, K60;\n" .
            "--:-:-:-:1      IADD   crst08,       crst08,     60;\n" .
            "--:-:-:-:1      IADD.X track08F1,    track08F1,  RZ;\n" .
            "--:-:-:-:5      IADD   track12F0.CC, track12F0, K60;\n" .
            "--:-:-:-:1      IADD   crst12,       crst12,     60;\n" .
            "--:-:-:-:1      IADD.X track12F1,    track12F1,  RZ;\n\n"  if $y == 4;

        $out .= sprintf(
            "--:-:-:-:1      FMUL c0, cx0y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c1, cx1y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c2, cx2y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c3, cx3y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c4, cx4y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c5, cx5y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c6, cx6y%d, alpha;\n" .
            "--:-:-:-:0      FMUL c7, cx7y%d, alpha;\n",
            ($y) x 8);

        $out .= "--:-:-:-:5      CAL STORE_C;\n\n";
    }
    return $out;

</CODE>

--:-:-:-:5      EXIT;

STORE_C:

--:-:-:-:1      ISETP.LT.AND P0, PT, crst00, param_CRST, P5; // crst00 < CRST && k < K
--:-:-:-:1      IADD         crst00, crst00, 1;
--:-:-:-:1      ISETP.LT.AND P1, PT, crst04, param_CRST, P5; // crst04 < CRST && k < K
--:-:-:-:1      IADD         crst04, crst04, 1;
--:-:-:-:1      ISETP.LT.AND P2, PT, crst08, param_CRST, P5; // crst08 < CRST && k < K
--:-:-:-:1      IADD         crst08, crst08, 1;
--:-:-:-:1      ISETP.LT.AND P3, PT, crst12, param_CRST, P5; // crst12 < CRST && k < K
--:-:-:-:0      IADD         crst12, crst12, 1;

// Warp shuffle to drop the awkward readAs/readBs mapping
--:-:-:-:1      STS.128 [writeCs+4x<00>], c0;
--:-:-:-:1      STS.128 [writeCs+4x<64>], c4;

--:-:1:-:1      LDS c0, [readCs + 4x<0*128 + 00>];
--:-:2:-:1      LDS c2, [readCs + 4x<1*128 + 00>];
--:-:3:-:1      LDS c4, [readCs + 4x<2*128 + 00>];
--:-:4:-:a      LDS c6, [readCs + 4x<3*128 + 00>];

01:-:-:-:1  @P0 RED.E.ADD.F32.FTZ.RN [track00F], c0;
--:-:-:-:1      PSETP.AND.AND P0, PT, P0, P6, PT;
02:-:-:-:1  @P1 RED.E.ADD.F32.FTZ.RN [track04F], c2;
--:-:-:-:1      PSETP.AND.AND P1, PT, P1, P6, PT;
04:-:-:-:1  @P2 RED.E.ADD.F32.FTZ.RN [track08F], c4;
--:-:-:-:1      PSETP.AND.AND P2, PT, P2, P6, PT;
08:-:-:-:1  @P3 RED.E.ADD.F32.FTZ.RN [track12F], c6;
--:-:-:-:1      PSETP.AND.AND P3, PT, P3, P6, PT;

--:-:1:-:1      LDS c1, [readCs + 4x<0*128 + 64>];
--:-:2:-:1      LDS c3, [readCs + 4x<1*128 + 64>];
--:-:3:-:1      LDS c5, [readCs + 4x<2*128 + 64>];
--:-:4:-:a      LDS c7, [readCs + 4x<3*128 + 64>];

01:1:-:-:1  @P0 RED.E.ADD.F32.FTZ.RN [track00F + 4x<64>], c1;
02:2:-:-:1  @P1 RED.E.ADD.F32.FTZ.RN [track04F + 4x<64>], c3;
04:3:-:-:1  @P2 RED.E.ADD.F32.FTZ.RN [track08F + 4x<64>], c5;
08:4:-:-:1  @P3 RED.E.ADD.F32.FTZ.RN [track12F + 4x<64>], c7;

01:-:-:-:6      IADD   track00F0.CC, track00F0, K1;
--:-:-:-:1      IADD.X track00F1,    track00F1, RZ;
02:-:-:-:6      IADD   track04F0.CC, track04F0, K1;
--:-:-:-:1      IADD.X track04F1,    track04F1, RZ;
04:-:-:-:6      IADD   track08F0.CC, track08F0, K1;
--:-:-:-:1      IADD.X track08F1,    track08F1, RZ;
08:-:-:-:6      IADD   track12F0.CC, track12F0, K1;
--:-:-:-:0      IADD.X track12F1,    track12F1, RZ;

--:-:-:-:5      RET;
