# Kernel: sconv_fprop_K64_N64

# Copyright 2014 Nervana Systems Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


<CONSTANT_MAPPING>
    addr_zero : 4x<64*8*4 + 0>
    addr_m    : 4x<64*8*4 + 4>
    addr_p    : 4x<64*8*4 + 5>
    addr_q    : 4x<64*8*4 + 6>
    addr_lut  : 4x<64*8*4 + 7>

    gridDimN  : c[0x0][0x14]
    gridDimK  : c[0x0][0x18]

    param_Rand[0]      : c[0x0][0x140]
    param_Rand[1]      : c[0x0][0x144]
    param_O[0]         : c[0x0][0x148]
    param_O[1]         : c[0x0][0x14c]
    param_I[0]         : c[0x0][0x150]
    param_I[1]         : c[0x0][0x154]
    param_F[0]         : c[0x0][0x158]
    param_F[1]         : c[0x0][0x15c]
    param_alpha        : c[0x0][0x160]
    param_flags        : c[0x0][0x164]
    param_N            : c[0x0][0x168]
    param_K            : c[0x0][0x16c]
    param_D            : c[0x0][0x170]
    param_H            : c[0x0][0x174]
    param_W            : c[0x0][0x178]
    param_WN           : c[0x0][0x17c]
    param_HWN          : c[0x0][0x180]
    param_DHWN         : c[0x0][0x184]
    param_C            : c[0x0][0x188]
    param_CRST         : c[0x0][0x18c]
    param_RST          : c[0x0][0x190]
    param_magic_RST    : c[0x0][0x194]
    param_shift_RST    : c[0x0][0x198]
    param_RS           : c[0x0][0x19c]
    param_magic_RS     : c[0x0][0x1a0]
    param_shift_RS     : c[0x0][0x1a4]
    param_S            : c[0x0][0x1a8]
    param_magic_S      : c[0x0][0x1ac]
    param_shift_S      : c[0x0][0x1b0]
    param_pad_d        : c[0x0][0x1b4]
    param_pad_h        : c[0x0][0x1b8]
    param_pad_w        : c[0x0][0x1bc]
    param_str_d        : c[0x0][0x1c0]
    param_str_h        : c[0x0][0x1c4]
    param_str_w        : c[0x0][0x1c8]
    param_P            : c[0x0][0x1cc]
    param_Q            : c[0x0][0x1d0]
    param_PQ           : c[0x0][0x1d4]
    param_QN           : c[0x0][0x1d8]
    param_PQN          : c[0x0][0x1dc]
    param_MPQN         : c[0x0][0x1e0]
    param_magic_Q      : c[0x0][0x1e4]
    param_shift_Q      : c[0x0][0x1e8]
    param_magic_PQ     : c[0x0][0x1ec]
    param_shift_PQ     : c[0x0][0x1f0]
    param_grid_P       : c[0x0][0x1f4]
    param_grid_Q       : c[0x0][0x1f8]
    param_grid_PQ      : c[0x0][0x1fc]
</CONSTANT_MAPPING>


<REGISTER_MAPPING>

    0-3     : m, p, q, unused
    4-95    ~ tid, bK, bN, bMPQ, ldK, N1, tid1, tidX, tk, tn, CRST, magicPQ, magicQ, PQ, Q, HWN, WN, str_d, str_h, str_w, pad_d, pad_h, pad_w, t, r, s, mt, pr, qs, x, y, z, i, x0, xW, y0, yH, z0, zD, lutStore, rst, rs, RS, S, magic_S, magic_RS, warp_count

    0-63    : czero<00-63>

     3, 2,11,10,19,18,27,26 : cx<0-7>y0
     7, 6,15,14,23,22,31,30 : cx<0-7>y1
     1, 0, 9, 8,17,16,25,24 : cx<0-7>y2
     5, 4,13,12,21,20,29,28 : cx<0-7>y3
    35,34,43,42,51,50,59,58 : cx<0-7>y4
    39,38,47,46,55,54,63,62 : cx<0-7>y5
    33,32,41,40,49,48,57,56 : cx<0-7>y6
    37,36,45,44,53,52,61,60 : cx<0-7>y7

    64-79   : j0Nx<0-7>, j0Ky<0-7>
    80-95   : j1Nx<0-7>, j1Ky<0-7>

    96-111  : loadN<0-7>, loadK<0-7>

    112-117 : trackN<0-1>, offsetN<0-1>, trackK<0-1>

    118-125 ~ writeS, ldK8, posCRST, endCRST, DHWN1, RST, magic_RST
    126-127 ~ readKs, readNs

    96-103  ~ c, lutOffset, imgOffset, chanOffset

    64-67   : mpq<0-3>
    64-67   : mm, pp, qq
    64-71   : c<0-7>
    72-73   : Out<0-1>
    74-125  ~ writeCs, readCs, alpha, kk, MPQN1, MPQN28, tid_2, bK_2, bN_2, tid7_4, tid3_7, ii, nn, N, QN, PQN, MPQN, MPQN4, flags

</REGISTER_MAPPING>

--:-:1:-:1      S2R tid,  SR_TID.X;
--:-:2:-:1      S2R bK,   SR_CTAID.Y;
--:-:3:-:1      S2R bN,   SR_CTAID.Z;
--:-:4:-:1      S2R bMPQ, SR_CTAID.X; # m,p,q stored in z index

<SCHEDULE_BLOCK>
01:-:-:-:1      ISETP.GE.AND P0, PT, tid, 32, PT;

--:-:-:-:1      MOV ldK,       param_K;
--:-:-:-:1      MOV DHWN1,     param_DHWN;
--:-:-:-:1      MOV CRST,      param_CRST;
--:-:-:-:1      MOV RST,       param_RST;
--:-:-:-:1      MOV magic_RST, param_magic_RST;

--:-:-:-:1      SHL ldK8,  ldK,   5;
<CODE>
    our ($s8, $u8);
    return $s8 || $u8 ? '' : q{
--:-:-:-:1      SHL DHWN1, DHWN1, 2;};
</CODE>

// tidX = (tid & 7) << 2
// posCRST = (tid >> 3) & 7
--:-:-:-:1      LOP.AND tid1, tid,  1;
--:-:-:-:1      LOP.AND tidX, tid,  7;
--:-:-:-:1      SHL     tidX, tidX, 2;
--:-:-:-:1      BFE.U32 posCRST, tid,  0x303; // 3 bits at position 3

--:-:-:-:1      IADD3 endCRST, posCRST, -8, CRST;
--:-:-:-:1      LOP.AND.NZ P3, RZ, CRST, 7;
--:-:-:-:1  @P3 IADD endCRST, endCRST, 8;

// trackN += bN*64 + tidX
04:-:-:-:1      ISCADD  tn, bN, tidX, 6;
<CODE>
    our ($s8, $u8);
    return $s8 || $u8 ? q{
--:-:-:-:1      IADD   trackN0.CC, tn, param_I[0];
--:-:-:-:1      IADD.X trackN1,    RZ, param_I[1];
    } : q{
--:-:-:-:1      LEA      trackN0.CC, tn, param_I[0], 0x2;
--:-:-:-:1      LEA.HI.X trackN1,    tn, param_I[1], RZ, 0x2;
    };
</CODE>


// P6 = tn < N
//--:-:-:-:1      ISETP.LT.AND P6, PT, tn, param_N, PT;

// trackK += bK*64 + ldK*posCRST + tidX
02:-:-:-:1      ISCADD  tk, bK, tidX, 6;
--:-:-:-:1      VMAD.U16.U16 tk, ldK, posCRST, tk;
--:-:-:-:1      LEA      trackK0.CC, tk, param_F[0], 0x2;
--:-:-:-:0      LEA.HI.X trackK1,    tk, param_F[1], RZ, 0x2;

// writeS = (64*posCRST + tidX) * 4
--:-:-:-:1      ISCADD  writeS, posCRST, tidX, 6;
--:-:-:-:1      SHL     writeS, writeS, 2;

// readNs = ((tid >> 1) & 7) << 4 + 4x<8*64>;
--:-:-:-:1      BFE.U32 readNs, tid,    0x301; // 3 bits at position 1
--:-:-:-:1      ISCADD  readNs, readNs, 4x<8*64>, 4;

// readKs  = (((tid & 0x30) >> 3) | (tid & 1)) << 4;
--:-:-:-:1      LOP.AND readKs, tid,    0x30;
--:-:-:-:1      SHR.U32 readKs, readKs, 3;
--:-:-:-:1      LOP.OR  readKs, readKs, tid1;
--:-:-:-:1      SHL     readKs, readKs, 4;

// c = posCRST / RST
--:-:-:-:1      XMAD.LO2 c, magic_RST, posCRST, RZ;
--:-:-:-:1      SHR.U32 c, c, param_shift_RST;

// P2 = c < C
--:-:-:-:1      ISETP.LT.AND P2, PT, c, param_C, PT;

// P3 = c < C && tn < N
//--:-:-:-:1      ISETP.LT.AND P3, PT, c, param_C, P6;

// chanOffset = c * DHWN1
--:-:-:-:1      XMAD.LO2 chanOffset, DHWN1, c, RZ;

// lutOffset = 4 * (posCRST % RST)
--:-:-:-:1      VMAD.U16.U16 lutOffset, -c, RST, posCRST;
--:-:-:-:1      SHL lutOffset, lutOffset, 2;

// posCRST += 8
--:-:-:-:1      IADD posCRST, posCRST, 8;
</SCHEDULE_BLOCK>

--:-:-:-:5  @P0 BRA.U END_SETUP;

<SCHEDULE_BLOCK>
--:-:-:-:1      STS.128 [addr_zero], RZ;

--:-:-:-:1      MOV N1,       param_N;
--:-:-:-:1      MOV pad_d,    param_pad_d;
--:-:-:-:1      MOV pad_h,    param_pad_h;
--:-:-:-:1      MOV pad_w,    param_pad_w;
--:-:-:-:1      MOV str_d,    param_str_d;
--:-:-:-:1      MOV str_h,    param_str_h;
--:-:-:-:1      MOV str_w,    param_str_w;
--:-:-:-:1      MOV WN,       param_WN;
--:-:-:-:1      MOV HWN,      param_HWN;
--:-:-:-:1      MOV PQ,       param_PQ;
--:-:-:-:1      MOV Q,        param_Q;
--:-:-:-:1      MOV magicPQ,  param_magic_PQ;
--:-:-:-:1      MOV magicQ,   param_magic_Q;
--:-:-:-:1      MOV S,        param_S;
--:-:-:-:1      MOV RS,       param_RS;
--:-:-:-:1      MOV magic_S,  param_magic_S;
--:-:-:-:1      MOV magic_RS, param_magic_RS;
--:-:-:-:1      MOV warp_count, 32;
--:-:-:-:1      MOV rst,      tid;

// m    = bMPQ / PQ
// bMPQ = bMPQ % PQ
08:-:-:-:1      XMAD.LO2 m, magicPQ, bMPQ, RZ;
--:-:-:-:1      SHR.U32 m, m, param_shift_PQ;
--:-:-:-:1      VMAD.U16.U16 bMPQ, -m, PQ, bMPQ;
// p = bMPQ / Q
// q = bMPQ % Q
--:-:-:-:1      XMAD.LO2 p, magicQ, bMPQ, RZ;
--:-:-:-:1      SHR.U32 p, p, param_shift_Q;
--:-:-:-:1      VMAD.U16.U16 q, -p, Q, bMPQ;

--:-:-:-:1      STS.128 [addr_m], m;

// mt = m * w - pad_d 
// pr = p * u - pad_h 
// qs = q * v - pad_w
--:-:-:-:1      VMAD.U16.U16 mt, m, str_d, -pad_d;
--:-:-:-:1      VMAD.U16.U16 pr, p, str_h, -pad_h;
--:-:-:-:1      VMAD.U16.U16 qs, q, str_w, -pad_w;
</SCHEDULE_BLOCK>

LUT_LOOP:

<SCHEDULE_BLOCK>
// warp synchronous loop while warp_count < RST (c=0)
--:-:-:-:1      ISETP.LT.AND P0, PT, warp_count, RST, PT;
--:-:-:-:1      IADD warp_count, warp_count, 32;
// t =  rst / RS
// rs = rst % RS
--:-:-:-:1      XMAD.LO2 t, magic_RS, rst, RZ;
--:-:-:-:1      SHR.U32 t, t, param_shift_RS;
--:-:-:-:1      VMAD.U16.U16 rs, -t, RS, rst;
// r = rs / S
// s = rs % S
--:-:-:-:1      XMAD.LO2 r, magic_S, rs, RZ;
--:-:-:-:1      SHR.U32 r, r, param_shift_S;
--:-:-:-:1      VMAD.U16.U16 s, -r, S, rs;
// x = qs + s
// y = pr + r
// z = mt + t
--:-:-:-:1      IADD x, qs, s;
--:-:-:-:1      IADD y, pr, r;
--:-:-:-:1      IADD z, mt, t;
// i = (z*HWN + y*WN + x*N) * 2
01:-:-:-:1      VMAD.U16.U16 i, x, N1, RZ;
--:-:-:-:1      XMAD.LO2 i, WN,  y, i;
--:-:-:-:1      XMAD.LO2 i, HWN, z, i;
<CODE>
    our ($s8, $u8);
    return $s8 || $u8 ? '' : q{
--:-:-:-:1      SHL i, i, 2;};
</CODE>

// Bounds check x and y, and make i negative if outside
--:-:-:-:1      ISET.LT.AND x0, x, RZ, PT;
--:-:-:-:1      ISET.GE.AND xW, x,  param_W, PT;
--:-:-:-:1      ISET.LT.AND y0, y, RZ, PT;
--:-:-:-:1      ISET.GE.AND yH, y,  param_H, PT;
--:-:-:-:1      ISET.LT.AND z0, z, RZ, PT;
--:-:-:-:1      ISET.GE.AND zD, z,  param_D, PT;
--:-:-:-:1      LOP3.LUT i, i, x0, xW, 0xfe;
<ORDERED>
--:-:-:-:1      LOP3.LUT i, i, y0, yH, 0xfe;
--:-:-:-:1      SHL lutStore, rst, 2;
--:-:-:-:1      IADD rst, rst, 32;
</ORDERED>
--:-:-:-:1      LOP3.LUT i, i, z0, zD, 0xfe;

// Store i imgOffset into the shared lookup table
--:1:-:-:1      STS [lutStore + addr_lut], i;
</SCHEDULE_BLOCK>

--:-:-:-:5  @P0 BRA.U LUT_LOOP;

END_SETUP:

--:-:-:-:5      BAR.SYNC 0;

--:-:6:-:1      LDS imgOffset, [lutOffset + addr_lut];

<CODE>
    return join '', map sprintf("--:-:-:-:1      LDS.U.128 czero%02d, [addr_zero];\n", $_ * 4), 0..15;
</CODE>

// doloadN = imgOffset >= 0 && c < C && tn < N
20:-:-:-:1      ISETP.GE.AND P3, PT, imgOffset, RZ, P2;

// offsetN = trackN + imgOffset + chanOffset
--:-:-:-:6      IADD3 offsetN0.CC, trackN0, imgOffset, chanOffset;
--:-:-:-:1      IADD.X offsetN1,   trackN1, RZ;

--:-:1:-:1  @P2 LDG.E.CI.128 loadK0, [trackK + 4x< 0>];
--:-:2:-:1  @P2 LDG.E.CI.128 loadK4, [trackK + 4x<32>];
--:-:3:-:1 @!P2 LDS.U.128 loadK0, [addr_zero];
--:-:3:-:2 @!P2 LDS.U.128 loadK4, [addr_zero];

<CODE>
    our ($s8, $u8);
    return $s8 || $u8 ? q{
--:-:4:-:1  @P3 LDG.E.CI loadN1, [offsetN + 1x<32>];
--:-:5:-:1  @P3 LDG.E.CI loadN0, [offsetN + 1x< 0>];
--:-:6:-:1 @!P3 LDS.U.64 loadN0, [addr_zero];
    } : q{
--:-:4:-:1  @P3 LDG.E.CI.128 loadN4, [offsetN + 4x<32>];
--:-:5:-:1  @P3 LDG.E.CI.128 loadN0, [offsetN + 4x< 0>];
--:-:6:-:1 @!P3 LDS.U.128 loadN0, [addr_zero];
--:-:6:-:1 @!P3 LDS.U.128 loadN4, [addr_zero];
    };
</CODE>

--:-:-:-:0      IADD trackK0.CC, trackK0, ldK8;

05:-:-:-:1      STS.128 [writeS + 4x<0*64 +  0>], loadK0;
02:-:-:-:1      STS.128 [writeS + 4x<0*64 + 32>], loadK4;

<CODE>
    our ($s8, $u8);
    return $s8 ? q{
28:-:-:-:4      I2F.F32.S8 loadN7, loadN1.B3;
--:-:-:-:4      I2F.F32.S8 loadN6, loadN1.B2;
--:-:-:-:4      I2F.F32.S8 loadN5, loadN1.B1;
--:-:4:-:4      I2F.F32.S8 loadN4, loadN1.B0;
10:-:-:-:4      I2F.F32.S8 loadN3, loadN0.B3;
--:-:-:-:4      I2F.F32.S8 loadN2, loadN0.B2;
--:-:-:-:4      I2F.F32.S8 loadN1, loadN0.B1;
--:-:5:-:1      I2F.F32.S8 loadN0, loadN0.B0;
    } : $u8 ? q{
28:-:-:-:4      I2F.F32.U8 loadN7, loadN1.B3;
--:-:-:-:4      I2F.F32.U8 loadN6, loadN1.B2;
--:-:-:-:4      I2F.F32.U8 loadN5, loadN1.B1;
--:-:4:-:4      I2F.F32.U8 loadN4, loadN1.B0;
10:-:-:-:4      I2F.F32.U8 loadN3, loadN0.B3;
--:-:-:-:4      I2F.F32.U8 loadN2, loadN0.B2;
--:-:-:-:4      I2F.F32.U8 loadN1, loadN0.B1;
--:-:5:-:1      I2F.F32.U8 loadN0, loadN0.B0;
    } : '';
</CODE>

--:-:-:-:0      IADD.X trackK1,  trackK1, RZ;

28:-:-:-:1      STS.128 [writeS + 4x<8*64 + 32>], loadN4;
10:-:-:-:1      STS.128 [writeS + 4x<8*64 +  0>], loadN0;

--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:0      LOP.XOR writeS, writeS, 4x<64*8*2>;

--:-:1:-:1      LDS.U.128 j0Nx0, [readNs + 4x<0*64 + 00>];
--:-:1:-:1      LDS.U.128 j0Ky0, [readKs + 4x<0*64 + 00>];
--:-:1:-:1      LDS.U.128 j0Nx4, [readNs + 4x<0*64 + 32>];
--:-:1:-:1      LDS.U.128 j0Ky4, [readKs + 4x<0*64 + 32>];

LOOP:

// Loop end condition
--:-:-:-:1      ISETP.LE.AND P0, PT, posCRST, endCRST, PT;
--:-:-:-:1      XMAD c, magic_RST, posCRST, RZ;
<CODE>

    # loadK = crst <= end && c < C
    # loadN = crst <= end && c < C && img >= 0

    our ($s8, $u8);
    
    my %insert =
    (
        j0c5  => "--:-:-:-:1      XMAD.PSL c, magic_RST.H1, posCRST, c;\n",
        j0c10 => "--:-:-:-:1      SHR.U32 c, c, param_shift_RST;\n",

        j0c15 => "--:-:-:-:1      ISETP.LT.AND P1, PT, c, param_C, P0;\n",

        j0c16 => "--:-:-:-:1  \@P0 VMAD.U16.U16 lutOffset, -c, RST, posCRST;\n",
        j0c21 => "--:-:-:-:1  \@P0 SHL lutOffset, lutOffset, 2;\n",
        j0c25 => "--:-:6:-:1  \@P0 LDS imgOffset, [lutOffset + addr_lut];\n",

        j0c27 => "--:-:2:-:1  \@P1 LDG.E.CI.128 loadK0, [trackK + 4x< 0>];\n",
        j0c29 => "--:-:3:-:1  \@P1 LDG.E.CI.128 loadK4, [trackK + 4x<32>];\n",
        j0c31 => "--:-:-:-:1 \@!P1 LDS.U.128 loadK0, [addr_zero];\n",
        j0c33 => "--:-:-:-:1 \@!P1 LDS.U.128 loadK4, [addr_zero];\n",

        j0c35 => "--:-:-:-:1  \@P0 XMAD chanOffset, DHWN1, c, RZ;\n",
        j0c40 => "--:-:-:-:1  \@P0 XMAD.PSL chanOffset, DHWN1.H1, c, chanOffset;\n",

        j1c16 => "20:-:-:-:1      ISETP.GE.AND P2, PT, imgOffset, RZ, P1;\n",
        j1c20 => "--:-:-:-:1  \@P0 IADD3 offsetN0.CC, trackN0, imgOffset, chanOffset;\n",
        j1c25 => "--:-:-:-:1  \@P0 IADD.X offsetN1,   trackN1, RZ;\n",

        ($s8 || $u8 ? 
            (
            j1c27 => "--:-:4:-:1  \@P2 LDG.E.CI loadN1, [offsetN + 1x<32>];\n",
            j1c29 => "--:-:5:-:1  \@P2 LDG.E.CI loadN0, [offsetN + 1x< 0>];\n",
            j1c31 => "--:-:-:-:1 \@!P2 LDS.U.64 loadN0, [addr_zero];\n",

                ($s8 ? 
                    (
                j5c53 => "08:-:-:-:1  \@P0 I2F.F32.S8 loadN7, loadN1.B3;\n",
                j5c57 => "--:-:-:-:1  \@P0 I2F.F32.S8 loadN6, loadN1.B2;\n",
                j5c61 => "--:-:-:-:1  \@P0 I2F.F32.S8 loadN5, loadN1.B1;\n",
                j6c1  => "--:-:4:-:1  \@P0 I2F.F32.S8 loadN4, loadN1.B0;\n",
                j6c5  => "10:-:-:-:1  \@P0 I2F.F32.S8 loadN3, loadN0.B3;\n",
                j6c9  => "--:-:-:-:1  \@P0 I2F.F32.S8 loadN2, loadN0.B2;\n",
                j6c13 => "--:-:-:-:1  \@P0 I2F.F32.S8 loadN1, loadN0.B1;\n",
                j6c17 => "--:-:5:-:1  \@P0 I2F.F32.S8 loadN0, loadN0.B0;\n",
                    ) :
                    (
                j5c53 => "08:-:-:-:1  \@P0 I2F.F32.U8 loadN7, loadN1.B3;\n",
                j5c57 => "--:-:-:-:1  \@P0 I2F.F32.U8 loadN6, loadN1.B2;\n",
                j5c61 => "--:-:-:-:1  \@P0 I2F.F32.U8 loadN5, loadN1.B1;\n",
                j6c1  => "--:-:4:-:1  \@P0 I2F.F32.U8 loadN4, loadN1.B0;\n",
                j6c5  => "10:-:-:-:1  \@P0 I2F.F32.U8 loadN3, loadN0.B3;\n",
                j6c9  => "--:-:-:-:1  \@P0 I2F.F32.U8 loadN2, loadN0.B2;\n",
                j6c13 => "--:-:-:-:1  \@P0 I2F.F32.U8 loadN1, loadN0.B1;\n",
                j6c17 => "--:-:5:-:1  \@P0 I2F.F32.U8 loadN0, loadN0.B0;\n",
                    )
                ),
            ) : 
            (
            j1c27 => "--:-:4:-:1  \@P2 LDG.E.CI.128 loadN4, [offsetN + 4x<32>];\n",
            j1c29 => "--:-:5:-:1  \@P2 LDG.E.CI.128 loadN0, [offsetN + 4x< 0>];\n",
            j1c31 => "--:-:-:-:1 \@!P2 LDS.U.128 loadN4, [addr_zero];\n",
            j1c33 => "--:-:-:-:1 \@!P2 LDS.U.128 loadN0, [addr_zero];\n",
            )
        ),

        j5c31 => "02:-:-:-:1  \@P0 STS.128 [writeS + 4x<0*64 +  0>], loadK0;\n",
        j5c33 => "04:-:-:-:1  \@P0 STS.128 [writeS + 4x<0*64 + 32>], loadK4;\n",

        j5c35 => "--:-:-:-:1  \@P0 IADD posCRST, posCRST, 8;\n",

        j6c31 => "08:-:-:-:1  \@P0 STS.128 [writeS + 4x<8*64 + 32>], loadN4;\n",
        j6c33 => "10:-:-:-:1  \@P0 STS.128 [writeS + 4x<8*64 +  0>], loadN0;\n",

        j6c38 => "--:-:-:-:1  \@P0 IADD   trackK0.CC, trackK0, ldK8;\n",
        j6c46 => "--:-:-:-:1  \@P0 IADD.X trackK1,    trackK1, RZ;\n",

        j6c62 => "--:-:-:-:5  \@P0 BAR.SYNC 0;\n" .
                 "--:-:-:-:1  \@P0 LOP.XOR readNs, readNs, 4x<64*8*2>;\n" .
                 "--:-:-:-:1  \@P0 LOP.XOR readKs, readKs, 4x<64*8*2>;\n" .
                 "--:-:-:-:1  \@P0 LOP.XOR writeS, writeS, 4x<64*8*2>;\n",

        j7c63 => "--:-:-:Y:5  \@P0 BRA.U LOOP;\n",
    );

    my @cOrder;
    my @swirl = ([0,2],[1,2],[1,0],[0,0]);
    my @y = (0,1,4,5);
    foreach my $x (0,2,4,6)
    {
        foreach my $y (@y)
        {
            push @cOrder, [$x + $_->[0], $y + $_->[1]] foreach @swirl;
        }
        @y = reverse @y;
    }

    my $out;
    foreach my $j (0 .. 7)
    {
        my $odd      = $j & 1;
        my $nOdd     = !$odd + 0;
        my $rsOffset = ($j + 1) % 8;
        my $rsPred   = $j == 7 ? '@P0' : '   ';

        $insert{"j${j}c0"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dNx0, [readNs + 4x<%d*64 + 00>];\n", $rsPred, $nOdd, $rsOffset;
        $insert{"j${j}c2"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dKy0, [readKs + 4x<%d*64 + 00>];\n", $rsPred, $nOdd, $rsOffset;
        $insert{"j${j}c4"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dNx4, [readNs + 4x<%d*64 + 32>];\n", $rsPred, $nOdd, $rsOffset;
        $insert{"j${j}c6"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dKy4, [readKs + 4x<%d*64 + 32>];\n", $rsPred, $nOdd, $rsOffset;

        foreach my $c (0 .. 63)
        {
            my ($x,$y) = @{$cOrder[$c]};

            my $ins    = $insert{"j${j}c$c"} || '';
            
            my $stall  = $ins =~ /LDS|I2I|I2F|F2F|LDG|STS|BAR|BRA/ ? 0 : 1;

            my $yield  = $c == 32 && $stall ? 'Y' : '-';

            my $wait   = $c == 0 ? '01' : '--';

            my $ctrl   = "$wait:-:-:$yield:$stall";

            $out .= sprintf "%s      FFMA cx%dy%d, j%dNx%d, j%dKy%d, cx%dy%d;\n%s", $ctrl,  $x,$y,  $odd,$x,  $odd,$y,  $x,$y,  $ins;
        }
    }
    return $out;

</CODE>

--:-:1:-:1      LDS.U.128 mpq, [addr_m];
--:-:2:-:1      S2R tid_2,  SR_TID.X;
--:-:3:-:1      S2R bN_2,   SR_CTAID.Z;
--:-:4:-:1      S2R bK_2,   SR_CTAID.Y;

<SCHEDULE_BLOCK>

// tid7_4 = (tid_2 & 7) << 2
// tid3_7 = (tid_2 >> 3) & 7
02:-:-:-:1      LOP.AND tid7_4, tid_2,  7;
--:-:-:-:1      SHL     tid7_4, tid7_4, 2;
--:-:-:-:1      BFE.U32 tid3_7, tid_2,  0x303;

--:-:-:-:1      LOP.AND readNs, readNs, 0x7ff;
--:-:-:-:1      LOP.AND readKs, readKs, 0x7ff;

// Div by 4 here collapses k stride
// writeCs = (readKs / 4) * 64 + readNs;
--:-:-:-:1      ISCADD  writeCs, readKs, readNs, 4;

// readCs  = 4 * (tid7_4 + (tid3_7 * 64))
--:-:-:-:1      ISCADD readCs, tid3_7, tid7_4, 6;
--:-:-:-:1      SHL    readCs, readCs, 2;

// n = bN*64 + tid7_4;
04:-:-:-:1      ISCADD nn, bN_2, tid7_4, 6;

// Mul by 4 here expands k stride back out
// k = bK*64 + tid3_7 * 4
--:-:-:-:1      SHL    tid3_7,   tid3_7, 2;
08:-:-:-:1      ISCADD kk, bK_2, tid3_7, 6;

// i = k*MPQN + m*PQN + p*QN + q*N + n
--:-:-:-:1      MOV N,     param_N;
--:-:-:-:1      MOV QN,    param_QN;
--:-:-:-:1      MOV PQN,   param_PQN;
--:-:-:-:1      MOV MPQN,  param_MPQN;
01:-:-:-:1      XMAD     ii,    N, qq, nn;
--:-:-:-:1      XMAD.LO2 ii,   QN, pp, ii;
--:-:-:-:1      XMAD.LO2 ii,  PQN, mm, ii;
--:-:-:-:1      XMAD.LO2 ii, MPQN, kk, ii;
--:-:-:-:1      LEA      Out0.CC, ii, param_O[0],     2;
--:-:-:-:0      LEA.HI.X Out1,    ii, param_O[1], RZ, 2;

--:-:-:-:1      SHL  MPQN1, MPQN, 2;
--:-:-:-:1      SHL  MPQN4, MPQN, 4;
--:-:-:-:1      ISCADD MPQN28, MPQN, -MPQN4, 7;

--:-:-:-:1      ISETP.LT.AND P0, PT, nn, param_N, PT; // nn +  0 < N
--:-:-:-:1      IADD nn, nn, 32;
--:-:-:-:1      ISETP.LT.AND P1, PT, nn, param_N, PT; // nn + 32 < N

--:-:-:-:1      MOV alpha, param_alpha;

// p5 = flags & 2 (apply relu)
--:-:-:-:1      MOV flags, param_flags;
--:-:-:-:1      LOP.AND.NZ P5, RZ, flags, 0x2;

</SCHEDULE_BLOCK>

--:-:-:-:5      BAR.SYNC 0;

<CODE>

    my $out;
    foreach my $y (0..7)
    {
        if ($y == 4)
        {
            $out .= sprintf(
                "--:-:-:-:1      IADD Out0.CC, Out0, MPQN28;\n" .
                "--:-:-:-:1      IADD kk, kk, 28;\n" .
                "--:-:-:-:1      FMUL c0, cx0y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c1, cx1y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c2, cx2y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c3, cx3y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c4, cx4y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c5, cx5y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c6, cx6y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c7, cx7y%d, alpha;\n" .
                "--:-:-:-:0      IADD.X Out1, Out1, RZ;\n\n",
                ($y) x 8);
        }
        else
        {
            $out .= sprintf(
                "--:-:-:-:1      FMUL c0, cx0y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c1, cx1y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c2, cx2y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c3, cx3y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c4, cx4y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c5, cx5y%d, alpha;\n" .
                "--:-:-:-:1      FMUL c6, cx6y%d, alpha;\n" .
                "--:-:-:-:0      FMUL c7, cx7y%d, alpha;\n\n",
                ($y) x 8);
        }

        $out .= "--:-:-:-:5      CAL STORE_C;\n\n";
    }
    return $out;

</CODE>

--:-:-:-:5      EXIT;

STORE_C:

--:-:-:-:2      ISETP.LT.AND P2, PT, kk, param_K, P0; // kk < K && nn +  0 < N
--:-:-:-:1      ISETP.LT.AND P3, PT, kk, param_K, P1; // kk < K && nn + 32 < N
--:-:-:-:1      IADD kk, kk, 1;

// Apply relu
--:-:-:-:2  @P5 FMNMX c0, c0, RZ, !PT;
--:-:-:-:2  @P5 FMNMX c1, c1, RZ, !PT;
--:-:-:-:2  @P5 FMNMX c2, c2, RZ, !PT;
--:-:-:-:2  @P5 FMNMX c3, c3, RZ, !PT;
--:-:-:-:2  @P5 FMNMX c4, c4, RZ, !PT;
--:-:-:-:2  @P5 FMNMX c5, c5, RZ, !PT;
--:-:-:-:2  @P5 FMNMX c6, c6, RZ, !PT;
--:-:-:-:0  @P5 FMNMX c7, c7, RZ, !PT;

// Warp shuffle to drop the awkward readAs/readBs mapping
--:-:-:-:4      STS.128 [writeCs + 4x<00>], c0;
--:-:-:-:1      STS.128 [writeCs + 4x<32>], c4;
--:-:1:-:1      LDS.U.128 c0, [readCs + 4x<00>];
--:-:2:-:1      LDS.U.128 c4, [readCs + 4x<32>];

// Store results back to global
01:-:-:-:1  @P2 STG.E.CG.128 [Out + 4x<00>], c0;
02:1:-:-:2  @P3 STG.E.CG.128 [Out + 4x<32>], c4;

01:-:-:-:6      IADD   Out0.CC, Out0, MPQN1;
--:-:-:-:0      IADD.X Out1,    Out1, RZ;

--:-:-:-:5      RET;

